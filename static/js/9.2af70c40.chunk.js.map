{"version":3,"sources":["containers/weather/WeatherContainer.js"],"names":["WeatherContainer","addressContext","useContext","AddressContext","useState","weatherForecast","setWeatherForecast","weatherCurrent","setWeatherCurrent","isLoading","setIsLoading","isError","setIsError","validCityName","isEmpty","address","isUndefined","isNull","cityName","includes","fetchWeatherData","a","FetchWeatherData","current","forecast","console","error","useEffect","timer","setInterval","log","clearInterval","loaderText","className","errorMessage","latlong"],"mappings":"sPAiIeA,UAzHU,WACvB,IAAMC,EAAiBC,qBAAWC,KADL,EAEiBC,mBAAS,IAF1B,mBAEtBC,EAFsB,KAELC,EAFK,OAGeF,mBAAS,IAHxB,mBAGtBG,EAHsB,KAGNC,EAHM,OAIKJ,oBAAS,GAJd,mBAItBK,EAJsB,KAIXC,EAJW,OAKCN,oBAAS,GALV,mBAKtBO,EALsB,KAKbC,EALa,KAiBvBC,EAAgB,WACpB,IACGC,YAAQb,EAAec,WACvBC,YAAYf,EAAec,WAC3BE,YAAOhB,EAAec,SACvB,CACA,IAAMG,EAAWjB,EAAec,QAAQG,SACxC,OACGJ,YAAQI,KACRF,YAAYE,KACZD,YAAOC,KACPA,EAASC,SAAS,eAClBD,EAASC,SAAS,QAGvB,OAAO,GAUHC,EAAgB,uCAAG,gCAAAC,EAAA,+EAE2BC,YAC9CrB,GAHmB,gBAEdM,EAFc,EAEdA,eAAgBF,EAFF,EAEEA,gBATHkB,EAcLhB,EAdciB,EAcEnB,EAb5BS,YAAQS,IAAaT,YAAQU,KAChChB,EAAkBe,GAClBjB,EAAmBkB,IAanBZ,GAAW,GATU,kDAWrBA,GAAW,GACXa,QAAQC,MAAR,MAZqB,yBAcrBhB,GAAa,GAdQ,+CAPF,IAACa,EAASC,IAOR,2BAAH,qDAgCtB,OAdAG,qBAAU,WACRjB,GAAa,GACbU,IACA,IAAMQ,EAAQC,aAAY,WACxBT,IACAK,QAAQK,IAAI,eACX,OAEH,OAAO,WACLC,cAAcH,MAGf,CAAC3B,EAAec,UAGjB,kBAAC,WAAD,KACGN,EACC,kBAAC,IAAD,CACEuB,WAAU,oCACRnB,IAAa,cAAYZ,EAAec,QAAQG,UAAa,GADrD,mBAKZ,kBAAC,WAAD,KACGP,EACC,6BACGE,IAIC,yBAAKoB,UAAU,uBACb,yBAAKA,UAAU,+BACb,kBAAC,IAAD,CACEC,aAAY,iEACVrB,IAAa,cACFZ,EAAec,QAAQG,UAC9B,GAHM,sBAQhB,MAGN,kBAAC,WAAD,KA9FLF,YAAYT,IACZO,YAAQP,IACRU,YAAOV,GAoGI,KANF,kBAAC,IAAD,CACEA,eAAgBA,EAChBF,gBAAiBA,EACjBU,QAASd,EAAec,QACxBoB,QAASlC,EAAekC","file":"static/js/9.2af70c40.chunk.js","sourcesContent":["import React, {useState, useEffect, useContext, Fragment} from 'react'\nimport {AddressContext} from '../../context/AddressContext'\nimport FetchWeatherData from '../../utils/FetchWeatherData'\nimport {isUndefined, isEmpty, isNull} from 'lodash-es'\nimport WeatherForecastContainer from '../weather-forecast/WeatherForecastContainer'\nimport LoaderComponent from '../../components/loader/LoaderComponent'\nimport ErrorComponent from '../../components/error/ErrorComponent'\n\nconst WeatherContainer = () => {\n  const addressContext = useContext(AddressContext)\n  const [weatherForecast, setWeatherForecast] = useState({})\n  const [weatherCurrent, setWeatherCurrent] = useState({})\n  const [isLoading, setIsLoading] = useState(false)\n  const [isError, setIsError] = useState(false)\n\n  // check whether to show/hide weatherForecastContainer based on weatherCurrent\n  const showWeatherForecast = () => {\n    return (\n      !isUndefined(weatherCurrent) &&\n      !isEmpty(weatherCurrent) &&\n      !isNull(weatherCurrent)\n    )\n  }\n\n  // check whether the cityName is valid\n  const validCityName = () => {\n    if (\n      !isEmpty(addressContext.address) &&\n      !isUndefined(addressContext.address) &&\n      !isNull(addressContext.address)\n    ) {\n      const cityName = addressContext.address.cityName\n      return (\n        !isEmpty(cityName) &&\n        !isUndefined(cityName) &&\n        !isNull(cityName) &&\n        !cityName.includes('undefined') &&\n        !cityName.includes('null')\n      )\n    }\n    return false\n  }\n\n  const setWeatherData = (current, forecast) => {\n    if (!isEmpty(current) && !isEmpty(forecast)) {\n      setWeatherCurrent(current)\n      setWeatherForecast(forecast)\n    }\n  }\n\n  const fetchWeatherData = async () => {\n    try {\n      const {weatherCurrent, weatherForecast} = await FetchWeatherData(\n        addressContext\n      )\n      // set the weatherCurrent and weatherForecast only when the data is non-empty\n      // this way, the old fetched data can be preserved when api call fail or limit exceed\n      setWeatherData(weatherCurrent, weatherForecast)\n      // set the error to false state with the above successful weather data fetch\n      setIsError(false)\n    } catch (err) {\n      setIsError(true)\n      console.error(err)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  useEffect(() => {\n    setIsLoading(true)\n    fetchWeatherData()\n    const timer = setInterval(() => {\n      fetchWeatherData()\n      console.log(\"triggered\")\n    }, 102000)\n\n    return () => {\n      clearInterval(timer)\n    }\n    // eslint-disable-next-line\n  }, [addressContext.address])\n\n  return (\n    <Fragment>\n      {isLoading ? (\n        <LoaderComponent\n          loaderText={`Fetching weather forecast ${\n            validCityName() ? `for ${addressContext.address.cityName}` : ''\n          } ðŸ˜Ž`}\n        />\n      ) : (\n        <Fragment>\n          {isError ? (\n            <div>\n              {validCityName() ? (\n                // show error component only when addressContext cityName is valid\n                // since by default on component load, addressContext address is empty\n                // this extra check will hide error and show only when api call fetch fail for fetching weatherData\n                <div className='flex justify-center'>\n                  <div className='sm:w-full lg:w-2/3 xl:w-1/2'>\n                    <ErrorComponent\n                      errorMessage={`Something went wrong. Failed to fetch weather forecast ${\n                        validCityName()\n                          ? `for ${addressContext.address.cityName}`\n                          : ''\n                      }! ðŸ˜¢`}\n                    />\n                  </div>\n                </div>\n              ) : null}\n            </div>\n          ) : (\n            <Fragment>\n              {showWeatherForecast() ? (\n                <WeatherForecastContainer\n                  weatherCurrent={weatherCurrent}\n                  weatherForecast={weatherForecast}\n                  address={addressContext.address}\n                  latlong={addressContext.latlong}\n                />\n              ) : null}\n            </Fragment>\n          )}\n        </Fragment>\n      )}\n    </Fragment>\n  )\n}\n\nexport default WeatherContainer\n"],"sourceRoot":""}