{"version":3,"sources":["components/favorite/FavoriteComponent.js","containers/favorites/FavoritesContainer.js"],"names":["FavoriteComponent","favorite","favoriteSelected","index","selectedIndex","useContext","ThemeContext","theme","colorTheme","className","onClick","address","cityName","split","FavoritesContainer","favorites","AddressContext","useState","selectedFavorite","setSelectedFavorite","favoriteWeather","setFavoriteWeather","isLoading","setIsLoading","slideIndex","setSlideIndex","weatherRef","useRef","favoritesLength","validCityName","isEmpty","isUndefined","isNull","includes","selectFavoriteHandler","fetchWeatherData","a","Object","keys","length","FetchWeatherData","response","state","scrollHandler","console","error","ref","current","window","scrollTo","offsetTop","useEffect","find","timer","setInterval","clearInterval","CarouselSettings","afterSlide","map","key","latlong","weatherCurrent","LoaderComponent","loaderText","ErrorComponent","errorMessage","WeatherForecastContainer","weatherForecast"],"mappings":"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","file":"static/js/8.355aed53.chunk.js","sourcesContent":["import React, {useContext} from 'react'\nimport {ThemeContext} from '../../context/ThemeContext'\nimport {PropTypes} from 'prop-types'\n\nconst FavoriteComponent = ({\n  favorite,\n  favoriteSelected,\n  index,\n  selectedIndex,\n}) => {\n  const {theme, colorTheme} = useContext(ThemeContext)\n  return (\n    <div\n      className={`h-16 text-${colorTheme} bg-${theme} hover:bg-${colorTheme} hover:text-${theme} border ${\n        index === selectedIndex\n          ? 'sm:border-teal-600'\n          : `sm:border-${colorTheme}`\n      }\n        } pt-5 lg:pt-1/2 font-semibold rounded-2xl cursor-pointer text-center justify-center`}\n      onClick={favoriteSelected}>\n      {favorite.address.cityName.split(', ')[0]}\n    </div>\n  )\n}\n\nexport default FavoriteComponent\n\nFavoriteComponent.propTypes = {\n  favorite: PropTypes.object,\n  favoriteSelected: PropTypes.func,\n  index: PropTypes.number,\n  selectedIndex: PropTypes.number,\n}\n","import React, {useState, useContext, useEffect, useRef, Fragment} from 'react'\nimport {AddressContext} from '../../context/AddressContext'\nimport FetchWeatherData from './../../utils/FetchWeatherData'\nimport {isUndefined, isEmpty, find, isNull} from 'lodash-es'\nimport Carousel from 'nuka-carousel'\nimport CarouselSettings from '../../utils/CarouselSettings'\nimport {ThemeContext} from '../../context/ThemeContext'\nimport FavoriteComponent from '../../components/favorite/FavoriteComponent'\nimport WeatherForecastContainer from '../weather-forecast/WeatherForecastContainer'\nimport LoaderComponent from '../../components/loader/LoaderComponent'\nimport ErrorComponent from '../../components/error/ErrorComponent'\n\nconst FavoritesContainer = () => {\n  const {favorites} = useContext(AddressContext)\n  const {theme, colorTheme} = useContext(ThemeContext)\n  const [selectedFavorite, setSelectedFavorite] = useState({})\n  const [favoriteWeather, setFavoriteWeather] = useState({})\n  const [isLoading, setIsLoading] = useState(false)\n  const [slideIndex, setSlideIndex] = useState(null)\n  const weatherRef = useRef()\n\n  // favorites data length\n  const favoritesLength = useRef(0)\n\n  /**\n   * scroll to weather component when selectedFavorite is set\n   * @param {DOMElement} ref (weatherRef)\n   */\n  const scrollToRef = (ref) => {\n    if (!isNull(ref.current)) {\n      window.scrollTo(0, ref.current.offsetTop)\n    }\n  }\n\n  // check whether weatherCurrent exist on selectedFavorite to show/hide weatherForecastContainer\n  const showWeatherForecast = () => {\n    return (\n      !isEmpty(favoriteWeather.weatherCurrent) &&\n      !isUndefined(favoriteWeather.weatherCurrent) &&\n      !isNull(favoriteWeather.weatherCurrent)\n    )\n  }\n\n  // check whether the cityName is valid\n  const validCityName = () => {\n    if (\n      !isEmpty(selectedFavorite) &&\n      !isUndefined(selectedFavorite) &&\n      !isNull(selectedFavorite)\n    ) {\n      const cityName = selectedFavorite.address.cityName\n      return (\n        !isEmpty(cityName) &&\n        !isUndefined(cityName) &&\n        !cityName.includes('') &&\n        !cityName.includes('null')\n      )\n    } else {\n      return false\n    }\n  }\n\n  const selectFavoriteHandler = (index) => {\n    if (favorites[index]) {\n      setSelectedFavorite({...favorites[index]})\n    }\n    setSlideIndex(index)\n  }\n\n  const fetchWeatherData = async () => {\n    if (\n      !isUndefined(selectedFavorite) &&\n      Object.keys(selectedFavorite).length\n    ) {\n      try {\n        setIsLoading(true)\n        const response = await FetchWeatherData(selectedFavorite)\n        // set favoriteWeather only when the data is non-empty\n        if (!isEmpty(response) && !isUndefined(response) && !isNull(response)) {\n          setFavoriteWeather((state) => ({...state, ...response}))\n          scrollHandler()\n        }\n      } catch (err) {\n        console.error(err)\n      } finally {\n        setIsLoading(false)\n      }\n    }\n  }\n\n  const scrollHandler = () => {\n    scrollToRef(weatherRef)\n  }\n\n  const favoritesChecker = () => {\n    // check for deleted selectedFavorite scenario\n    // i.e. selectedFavorite is not in the favorites\n    // to update it with the favorite at current slideIndex\n    if (\n      !isEmpty(selectedFavorite) &&\n      !isUndefined(selectedFavorite) &&\n      !isNull(selectedFavorite)\n    ) {\n      if (\n        isUndefined(\n          find(\n            favorites,\n            (favorite) =>\n              favorite.address.cityName === selectedFavorite.address.cityName\n          )\n        )\n      ) {\n        selectFavoriteHandler(slideIndex)\n      } else {\n        // if favorites get updated\n        // i.e. a new favorite is added (favorites.length > favoritesLength)\n        // set selectedFavorite and slideIndex to the newly added favorite\n        // i.e. last favorite in favorites\n        if (favorites.length > favoritesLength.current) {\n          selectFavoriteHandler(favorites.length - 1)\n        }\n      }\n    }\n  }\n\n  useEffect(() => {\n    fetchWeatherData()\n    /* important edge case scenarios checker for deleted selectedFavorite & newly added favorite */\n    favoritesChecker()\n    // update favoritesLength\n    favoritesLength.current = favorites.length\n    const timer = setInterval(() => {\n      fetchWeatherData()\n    }, 3600000)\n    return () => {\n      clearInterval(timer)\n    }\n    // eslint-disable-next-line\n  }, [selectedFavorite, favorites])\n\n  return (\n    <Fragment>\n      {favorites.length > 0 ? (\n        <div className={`bg-${theme} pt-10 pb-24 mb-0`}>\n          <p className={`text-center font-bold text-2xl text-${colorTheme}`}>\n            Favorites\n          </p>\n          {/* mobile */}\n          <div className='sm:hidden px-5 py-5'>\n            <Carousel\n              {...CarouselSettings('favorite')}\n              slideIndex={slideIndex}\n              afterSlide={(slideIndex) => selectFavoriteHandler(slideIndex)}>\n              {favorites.map((favorite, index) => {\n                return (\n                  <FavoriteComponent\n                    key={index}\n                    favorite={favorite}\n                    index={index}\n                    selectedIndex={slideIndex}\n                    favoriteSelected={() => selectFavoriteHandler(index)}\n                  />\n                )\n              })}\n            </Carousel>\n          </div>\n          {/* tablet and above devices */}\n          <div className='hidden sm:flex justify-center items-center'>\n            <div className='sm:w-5/6 xl:max-w-6xl px-5 py-5'>\n              <div className='flex sm:flex-row flex-wrap justify-center'>\n                {favorites.map((favorite, index) => {\n                  return (\n                    <div className='m-2 sm:w-1/2 md:w-1/4' key={index}>\n                      <FavoriteComponent\n                        key={favorite.latlong}\n                        favorite={favorite}\n                        index={index}\n                        selectedIndex={slideIndex}\n                        favoriteSelected={() => selectFavoriteHandler(index)}\n                      />\n                    </div>\n                  )\n                })}\n              </div>\n            </div>\n          </div>\n\n          <div ref={weatherRef}>\n            {showWeatherForecast() ? (\n              <WeatherForecastContainer\n                weatherCurrent={favoriteWeather.weatherCurrent}\n                weatherForecast={favoriteWeather.weatherForecast}\n                address={selectedFavorite.address}\n                latlong={selectedFavorite.latlong}\n              />\n            ) : (\n              <Fragment>\n                {isLoading ? (\n                  <LoaderComponent\n                    loaderText={`Fetching weather forecast ${\n                      validCityName()\n                        ? `for ${selectedFavorite.address.cityName}`\n                        : ''\n                    } 😎`}\n                  />\n                ) : (\n                  <div>\n                    {validCityName() ? (\n                      // show error component only when selectedFavorite cityName is valid\n                      // since by default on component load, selectedFavorite is empty\n                      // this extra check will hide error and show only when api call fetch fail for selectedFavorite\n                      <div className='flex justify-center'>\n                        <div className='sm:w-full lg:w-2/3 xl:w-1/2'>\n                          <ErrorComponent\n                            errorMessage={`Something went wrong. Failed to fetch weather forecast ${\n                              validCityName()\n                                ? `for ${selectedFavorite.address.cityName}`\n                                : ''\n                            }! 😢`}\n                          />\n                        </div>\n                      </div>\n                    ) : null}\n                  </div>\n                )}\n              </Fragment>\n            )}\n          </div>\n        </div>\n      ) : null}\n    </Fragment>\n  )\n}\n\nexport default FavoritesContainer\n"],"sourceRoot":""}