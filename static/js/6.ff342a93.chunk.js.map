{"version":3,"sources":["components/address/AddressComponent.js","components/search/SearchComponent.js","containers/autocomplete/AutoCompleteContainer.js","containers/home/HomeContainer.js","components/error/ErrorComponent.js","context/AddressContext.js","context/WeatherUnitContext.js","containers/error-boundary/ErrorBoundaryContainer.js","utils/AlgoliaHeaders.js","utils/ValidCityName.js"],"names":["AddressComponent","props","useContext","ThemeContext","theme","colorTheme","className","onClick","addressSelected","address","cityName","IconComponent","type","color","TYPES","search","up","down","SearchComponent","style","backgroundColor","letterSpacing","id","placeholder","onChange","citySearch","value","city","showCaret","caretClicked","showAddresses","axiosRetry","axios","retryDelay","exponentialDelay","AutoCompleteContainer","state","showLoader","addresses","errorMessage","debounceAddress","debounce","getAddresses","searchCity","event","setState","target","toggleAddresses","prevState","setCity","a","split","context","updateState","latlong","message","this","trim","request","url","method","data","query","aroundLatLng","headers","HEADERS","hits","isEmpty","isUndefined","handleError","results","map","hit","en","default","administrative","country","validName","lat","lng","cityId","objectID","response","clearState","LoaderComponent","index","key","length","ErrorComponent","showCloseBtn","closeError","Component","contextType","AddressContext","WeatherContainer","lazy","HomeContainer","WeatherUnitContext","ErrorBoundaryContainer","fallback","loaderText","role","xmlns","viewBox","d","React","createContext","AddressContextProvider","updateFavorites","favorites","formatCoords","latitude","longitude","updateAddress","get","console","error","getAddress","log","getFavorites","localStorage","getItem","JSON","parse","Provider","children","propTypes","PropTypes","objectOf","string","array","func","weatherUnit","WeatherUnitContextProvider","useState","setWeatherUnit","useEffect","setItem","stringify","updateWeatherUnit","unit","hasError","process","REACT_APP_ALGOLIA_PLACES_APP_ID","REACT_APP_ALGOLIA_PLACES_API_KEY","name","showDelimeter","isNull"],"mappings":"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","file":"static/js/6.ff342a93.chunk.js","sourcesContent":["import React, {useContext} from 'react'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport {PropTypes} from 'prop-types'\r\n\r\nconst AddressComponent = props => {\r\n  const {theme, colorTheme} = useContext(ThemeContext)\r\n  return (\r\n    <p\r\n      className={`px-5 py-1 cursor-pointer item text-${colorTheme} hover:text-${theme} hover:bg-${colorTheme}`}\r\n      onClick={props.addressSelected}>\r\n      {props.address.cityName}\r\n    </p>\r\n  )\r\n}\r\n\r\nexport default AddressComponent\r\n\r\nAddressComponent.propTypes = {\r\n  addressSelected: PropTypes.func,\r\n  address: PropTypes.objectOf(PropTypes.string)\r\n}\r\n","import React, {useContext} from 'react'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport {PropTypes} from 'prop-types'\r\nimport {FiSearch} from 'react-icons/fi'\r\nimport {IoIosArrowUp, IoIosArrowDown} from 'react-icons/io'\r\n\r\nconst IconComponent = ({type, color}) => {\r\n  const TYPES = {\r\n    search: <FiSearch />,\r\n    up: <IoIosArrowUp />,\r\n    down: <IoIosArrowDown />\r\n  }\r\n  return <p className={`opacity-75 text-2xl fill-${color}`}>{TYPES[type]}</p>\r\n}\r\n\r\nconst SearchComponent = props => {\r\n  const {theme, colorTheme} = useContext(ThemeContext)\r\n  return (\r\n    <div className='h-12 mx-5 mt-5'>\r\n      <div className='relative'>\r\n        <div className='absolute top-0 left-0 ml-5 mt-3'>\r\n          <IconComponent type='search' color={colorTheme} />\r\n        </div>\r\n        <input\r\n          style={{\r\n            backgroundColor: `${theme === 'dark' ? '#3a3a3a' : '#e2e8f0'}`,\r\n            letterSpacing: '0.05em'\r\n          }}\r\n          className={`data-hj-whitelist block appearance-none w-full border-none rounded-full shadow py-3 pl-12 pr-6 mb-3 leading-tight focus:outline-none focus:bg-gray-200 truncate text-${colorTheme}`}\r\n          id='grid-first-name'\r\n          type='text'\r\n          placeholder='Type city name to find weather forecast'\r\n          onChange={props.citySearch}\r\n          value={props.city}\r\n        />\r\n        {props.showCaret ? (\r\n          <div\r\n            className='flex right-0 absolute top-0 mr-4 mt-3 cursor-pointer'\r\n            onClick={props.caretClicked}>\r\n            {props.showAddresses ? (\r\n              <IconComponent type='up' color={colorTheme} />\r\n            ) : (\r\n              <IconComponent type='down' color={colorTheme} />\r\n            )}\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchComponent\r\n\r\nSearchComponent.propTypes = {\r\n  city: PropTypes.string,\r\n  cityName: PropTypes.string,\r\n  showCaret: PropTypes.bool,\r\n  showAddresses: PropTypes.bool,\r\n  caretClicked: PropTypes.func\r\n}\r\n","import React, {Component, Fragment} from 'react'\r\nimport axios from 'axios'\r\nimport axiosRetry from 'axios-retry'\r\nimport debounce from 'lodash/debounce'\r\nimport './AutoCompleteStyle.scss'\r\nimport AddressComponent from '../../components/address/AddressComponent'\r\nimport LoaderComponent from '../../components/loader/LoaderComponent'\r\nimport ErrorComponent from '../../components/error/ErrorComponent'\r\nimport {AddressContext} from '../../context/AddressContext'\r\nimport SearchComponent from '../../components/search/SearchComponent'\r\nimport {isEmpty, isUndefined} from 'lodash-es'\r\nimport HEADERS from '../../utils/AlgoliaHeaders'\r\nimport validName from '../../utils/ValidCityName'\r\n\r\n// Exponential back-off retry delay between requests\r\naxiosRetry(axios, {retryDelay: axiosRetry.exponentialDelay})\r\n\r\nclass AutoCompleteContainer extends Component {\r\n  static contextType = AddressContext\r\n  state = {\r\n    showCaret: false,\r\n    showAddresses: false,\r\n    showLoader: false,\r\n    city: '',\r\n    addresses: [],\r\n    errorMessage: '',\r\n  }\r\n\r\n  handleError(message) {\r\n    this.setState({errorMessage: message})\r\n  }\r\n\r\n  // debounced function\r\n  debounceAddress = debounce(this.getAddresses, 1000)\r\n\r\n  searchCity = (event) => {\r\n    this.setState({city: event.target.value, errorMessage: ''})\r\n    this.debounceAddress()\r\n  }\r\n\r\n  // fetch valid matched addresses for searched city\r\n  async getAddresses() {\r\n    // check for empty city value since deleting city value character by character will trigger the debounceAddress\r\n    // city value could be empty when this function run\r\n    // so this extra check will fix the bug of showing addresses list when there is no city name\r\n    if (this.state.city.trim()) {\r\n      try {\r\n        this.setState({showLoader: true})\r\n        const {hits} = (\r\n          await axios.request({\r\n            url: 'https://places-dsn.algolia.net/1/places/query',\r\n            method: 'post',\r\n            data: {\r\n              query: this.state.city,\r\n              type: 'city',\r\n              aroundLatLng: this.context.latlong,\r\n            },\r\n            headers: HEADERS,\r\n          })\r\n        ).data\r\n\r\n        // populate addresses and show them if matching cities exist\r\n        if (!isEmpty(hits) && !isUndefined(hits)) {\r\n          const results = hits.map((hit) => {\r\n            // city value lives in default array of locale_names\r\n            const city = `${\r\n              hit['locale_names'].en\r\n                ? hit['locale_names'].en[0]\r\n                : hit['locale_names'].default[0]\r\n            }`\r\n            // state value lives in administrative array\r\n            const state = `${hit.administrative ? hit.administrative[0] : ''}`\r\n            // country value lives in country object in different languages and gran the \"en\" version if available or else the default version\r\n            const country = `${\r\n              hit.country.en ? hit.country.en : hit.country.default\r\n            }`\r\n\r\n            // prettier-ignore\r\n            const cityName = `${validName(city)}${validName(state)}${validName(country, false)}`\r\n            const {lat, lng} = hit['_geoloc']\r\n            return {\r\n              cityName: cityName,\r\n              cityId: hit.objectID,\r\n              latlong: `${lat},${lng}`,\r\n            }\r\n          })\r\n          // results is an array of `address` objects with cityName, objectID, and latlong properties\r\n          this.setState({\r\n            addresses: results,\r\n            showCaret: true,\r\n            showAddresses: true,\r\n            errorMessage: '',\r\n          })\r\n        } else {\r\n          this.setState({showAddresses: false})\r\n          this.handleError(\r\n            'No matching cities found. Try searching with a valid city name!'\r\n          )\r\n        }\r\n      } catch (error) {\r\n        this.handleError(error.response ? error.response : '')\r\n      } finally {\r\n        this.setState({showLoader: false})\r\n      }\r\n    } else {\r\n      this.clearState()\r\n    }\r\n  }\r\n\r\n  toggleAddresses = () => {\r\n    this.setState((prevState) => {\r\n      return {\r\n        showAddresses: !prevState.showAddresses,\r\n      }\r\n    })\r\n  }\r\n\r\n  setCity = async (address) => {\r\n    if (address) {\r\n      // set city to just have cityName excluding state and country in the search input\r\n      // 'Herndon, Virginia, United States' -> 'Herndon'\r\n      this.setState({\r\n        city: address.cityName.split(',')[0],\r\n        showAddresses: false,\r\n      })\r\n\r\n      this.context.updateState({\r\n        address: address,\r\n        latlong: address.latlong,\r\n      })\r\n    }\r\n  }\r\n\r\n  clearState() {\r\n    this.setState({\r\n      showCaret: false,\r\n      showAddresses: false,\r\n      showLoader: false,\r\n      addresses: [],\r\n      errorMessage: '',\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <div className='flex justify-center mt-5'>\r\n          <div className='w-full sm:w-5/6 md:w-2/3 xl:max-w-5xl'>\r\n            <SearchComponent\r\n              city={this.state.city}\r\n              showCaret={this.state.showCaret}\r\n              showAddresses={this.state.showAddresses}\r\n              citySearch={this.searchCity}\r\n              caretClicked={this.toggleAddresses}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='flex justify-center'>\r\n          <div className='w-full sm:w-5/6 md:w-2/3 xl:max-w-5xl'>\r\n            {this.state.showLoader ? (\r\n              <LoaderComponent />\r\n            ) : (\r\n              this.state.showAddresses && (\r\n                <div className='mx-10 mt-0 border-solid border-2 border-gray-400 rounded-b-xl address-list'>\r\n                  {this.state.addresses.map((address, index) => {\r\n                    return (\r\n                      <AddressComponent\r\n                        address={address}\r\n                        key={index}\r\n                        addressSelected={() => this.setCity(address)}\r\n                      />\r\n                    )\r\n                  })}\r\n                </div>\r\n              )\r\n            )}\r\n            {this.state.errorMessage.length > 0 && (\r\n              <div className='flex justify-center'>\r\n                <div className='w-5/6'>\r\n                  <ErrorComponent\r\n                    errorMessage={this.state.errorMessage}\r\n                    showCloseBtn={true}\r\n                    closeError={() => {\r\n                      this.setState({errorMessage: ''})\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AutoCompleteContainer\r\n","import React, {Component, Suspense, lazy, Fragment} from 'react'\r\nimport AutoCompleteContainer from '../autocomplete/AutoCompleteContainer'\r\nimport LoaderComponent from '../../components/loader/LoaderComponent'\r\nimport {AddressContextProvider} from '../../context/AddressContext'\r\nimport {WeatherUnitContextProvider} from '../../context/WeatherUnitContext'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport ErrorBoundaryContainer from '../error-boundary/ErrorBoundaryContainer'\r\nconst WeatherContainer = lazy(() => import('./../weather/WeatherContainer'))\r\nconst FavoritesContainer = lazy(() => import('../favorites/FavoritesContainer'))\r\n\r\nexport class HomeContainer extends Component {\r\n  static contextType = ThemeContext\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <WeatherUnitContextProvider>\r\n          <AddressContextProvider>\r\n            {/* <AutoCompleteContainer /> */}\r\n            <ErrorBoundaryContainer>\r\n              <Suspense\r\n                fallback={\r\n                  <LoaderComponent loaderText={'Loading components'} />\r\n                }>\r\n                <WeatherContainer />\r\n                {/* <FavoritesContainer /> */}\r\n              </Suspense>\r\n            </ErrorBoundaryContainer>\r\n          </AddressContextProvider>\r\n        </WeatherUnitContextProvider>\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default HomeContainer\r\n","import React, {useContext} from 'react'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\n\r\nconst ErrorComponent = props => {\r\n  const {theme} = useContext(ThemeContext)\r\n  return (\r\n    <div\r\n      className={`w-full ml-auto mr-auto h-auto bg-${theme} border border-red-400 text-red-700 mt-5 px-4 py-2 rounded relative`}\r\n      role='alert'>\r\n      <span className='w-5/6 block break-words'>{props.errorMessage}</span>\r\n      {props.showCloseBtn && (\r\n        <span\r\n          className='absolute top-0 bottom-0 right-0 ml-3 mr-1 py-3'\r\n          onClick={props.closeError}>\r\n          <svg\r\n            className='fill-current h-6 w-6 text-red-500'\r\n            role='button'\r\n            xmlns='http://www.w3.org/2000/svg'\r\n            viewBox='0 0 20 20'>\r\n            <title>Close</title>\r\n            <path d='M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z' />\r\n          </svg>\r\n        </span>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ErrorComponent\r\n","import React, {Component} from 'react'\r\nimport {PropTypes} from 'prop-types'\r\nimport axios from 'axios'\r\nimport {isEmpty, isUndefined} from 'lodash-es'\r\nimport HEADERS from '../utils/AlgoliaHeaders'\r\nimport validName from './../utils/ValidCityName'\r\n\r\n// const token = process.env.REACT_APP_IPINFO_TOKEN\r\nconst AddressContext = React.createContext(null)\r\n\r\nclass AddressContextProvider extends Component {\r\n  updateState = (state) => {\r\n    this.setState({...state})\r\n  }\r\n\r\n  updateFavorites = (state) => {\r\n    this.setState({...state})\r\n  }\r\n  state = {\r\n    address: {\r\n      cityName: '',\r\n      cityId: '',\r\n    },\r\n    latlong: '',\r\n    favorites: [],\r\n    updateState: this.updateState,\r\n    updateFavorites: this.updateFavorites,\r\n  }\r\n\r\n  formatCoords = (latitude, longitude) => {\r\n    return `${latitude},${longitude}`\r\n  }\r\n\r\n  updateAddress = async (latlong) => {\r\n    let hit = {}\r\n    try {\r\n      const {hits} = (\r\n        await axios.get(\r\n          `https://places-dsn.algolia.net/1/places/reverse?aroundLatLng=${latlong},&hitsPerPage=1&language=en`,\r\n          {\r\n            headers: HEADERS,\r\n          }\r\n        )\r\n      ).data\r\n      hit = hits[0]\r\n\r\n      if (!isEmpty(hit) && !isUndefined(hit)) {\r\n        const city = hit.city ? hit.city[0] : ''\r\n        const state = hit.administrative ? hit.administrative[0] : ''\r\n        const country = hit.country ? hit.country : ''\r\n        const cityName = `${validName(city)}${validName(state)}${validName(\r\n          country,\r\n          false\r\n        )}`\r\n        const cityId = hit.objectID ? hit.objectID : ''\r\n        this.updateState({\r\n          address: {\r\n            cityName,\r\n            cityId,\r\n          },\r\n          latlong,\r\n        })\r\n      }\r\n    } catch (error) {\r\n      console.error(error)\r\n    }\r\n  }\r\n\r\n  getAddress = async () => {\r\n    // if ('geolocation' in navigator) {\r\n    //   navigator.geolocation.getCurrentPosition(async (position) => {\r\n    //     const latlong = this.formatCoords(\r\n    //       \"24.8607\", \"67.0011\"\r\n    //     )\r\n    //     this.updateAddress(latlong)\r\n    //   })\r\n    // } else {\r\n      \r\n    // }\r\n\r\n    try {\r\n      const {data} = await axios.get('https://ipapi.co/json')\r\n      const latlong = this.formatCoords(\"49.1125\", \"9.7373\")\r\n      this.updateAddress(latlong)\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  getFavorites = () => {\r\n    if (localStorage.getItem('favorites')) {\r\n      this.setState({\r\n        favorites: [...JSON.parse(localStorage.getItem('favorites'))],\r\n      })\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getAddress()\r\n    // update favorites for the initial application load\r\n    this.getFavorites()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <AddressContext.Provider value={this.state}>\r\n        {this.props.children}\r\n      </AddressContext.Provider>\r\n    )\r\n  }\r\n}\r\n\r\nexport {AddressContext, AddressContextProvider}\r\n\r\nAddressContext.propTypes = {\r\n  address: PropTypes.objectOf(PropTypes.string),\r\n  favorites: PropTypes.array,\r\n  updateState: PropTypes.func,\r\n  updateFavorites: PropTypes.func,\r\n}\r\n","import React, {useState, useEffect} from 'react'\r\nconst WeatherUnitContext = React.createContext({\r\n  weatherUnit: 'C'\r\n})\r\n\r\nconst WeatherUnitContextProvider = ({children}) => {\r\n  const [weatherUnit, setWeatherUnit] = useState('C')\r\n\r\n  /**\r\n   * @param {String} unit (F | C)\r\n   * @param {String} type (selectUnit | toggle)\r\n   */\r\n  const updateWeatherUnit = unit => {\r\n    setWeatherUnit(unit)\r\n    localStorage.setItem('unit', JSON.stringify(unit))\r\n  }\r\n\r\n  useEffect(() => {\r\n    // store preferred temperature unit in localStorage\r\n    if (!localStorage.getItem('unit')) {\r\n      localStorage.setItem('unit', JSON.stringify('C'))\r\n    } else {\r\n      setWeatherUnit(JSON.parse(localStorage.getItem('unit')))\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [])\r\n\r\n  return (\r\n    <WeatherUnitContext.Provider value={{weatherUnit, updateWeatherUnit}}>\r\n      {children}\r\n    </WeatherUnitContext.Provider>\r\n  )\r\n}\r\n\r\nexport {WeatherUnitContext, WeatherUnitContextProvider}\r\n","import React, {Component} from 'react'\r\nimport ErrorComponent from '../../components/error/ErrorComponent'\r\n\r\nexport class ErrorBoundaryContainer extends Component {\r\n  state = {\r\n    hasError: false,\r\n  }\r\n\r\n  static getDerivedStateFromError(error) {\r\n    // Update state so the next render will show the fallback UI.\r\n    return {hasError: true}\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.hasError ? (\r\n          <div className='flex'>\r\n            <div className='w-1/6'></div>\r\n            <div className='w-2/3 justify-center text-center'>\r\n              <ErrorComponent\r\n                errorMessage={'Something went wrong. Reload the page!'}\r\n              />\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          this.props.children\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ErrorBoundaryContainer\r\n","// custom HTTP headers for authenticating requests sent to Algolia places server\r\n\r\nconst HEADERS = {\r\n  'X-Algolia-Application-Id': process.env.REACT_APP_ALGOLIA_PLACES_APP_ID || '',\r\n  'X-Algolia-API-Key': process.env.REACT_APP_ALGOLIA_PLACES_API_KEY || '',\r\n}\r\n\r\nexport default HEADERS\r\n","import {isEmpty, isUndefined, isNull} from 'lodash-es'\r\n\r\n/**\r\n * util func to check and return the valid name\r\n * @param {*} name (city or state or country)\r\n * @param {*} showDelimeter (false for country)\r\n */\r\nconst validName = (name, showDelimeter = true) => {\r\n  return !isEmpty(name) && !isUndefined(name) && !isNull(name)\r\n    ? `${name}${showDelimeter ? ', ' : ''}`\r\n    : ''\r\n}\r\n\r\nexport default validName\r\n"],"sourceRoot":""}