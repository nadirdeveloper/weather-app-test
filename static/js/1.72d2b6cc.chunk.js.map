{"version":3,"sources":["utils/FetchWeatherData.js","utils/CarouselSettings.js","utils/WeatherBackground.js","components/weather/InfoComponent.js","utils/WindDirection.js","utils/WeatherIcon.js","utils/TemperatureConvert.js","components/weather/WeatherIconComponent.js","components/weather/InfoDetailComponent.js","utils/SpeedConvert.js","containers/current-weather/CurrentWeatherContainer.js","components/weather/DayComponent.js","components/weather/TimeframeComponent.js","containers/forecast/ForecastContainer.js","containers/weather-forecast/WeatherForecastContainer.js","utils/FormatTime.js"],"names":["process","REACT_APP_DARKSKY_API_KEY","axiosRetry","axios","retryDelay","exponentialDelay","FetchWeatherData","a","latlong","weatherCurrent","weatherForecast","isUndefined","isEmpty","isNull","get","data","weatherData","timezone","current","sunrise","daily","sunset","timeFrames","hourly","forEach","hour","date","FormatTime","dt","Object","keys","includes","push","days","day","console","error","CarouselSettings","type","resolution","width","slidesToShow","slidesToScroll","initialSlideHeight","slideWidth","speed","easing","defaultControlsConfig","prevButtonStyle","display","nextButtonStyle","pagingDotsStyle","fill","position","top","margin","formatTime","time","moment","tz","format","isDawnDusk","currentTime","currentHour","split","timeHour","Number","getWeatherBackground","weather","icon","main","sunriseTime","sunsetTime","currentMinutes","sunriseHour","sunriseMinutes","sunsetHour","sunsetMinutes","getType","InfoComponent","address","useContext","AddressContext","updateFavorites","useState","setDate","setTime","formattedDateTimeRef","useRef","datetimeSetter","dateObj","useEffect","dateTimer","setInterval","formattedDateTimeObj","add","clearInterval","className","cityName","getWindDirection","deg","getWeatherIcon","fToC","temp","Math","round","WeatherIconComponent","up","right","down","left","InfoDetailComponent","WeatherUnitContext","weatherUnit","updateWeatherUnit","unitClick","unit","Event","category","action","label","computedTempValue","startsWith","title","src","AssetsSrcURL","alt","onClick","humidity","wind_speed","computedSpeedValue","windBearing","CurrentWeatherContainer","ErrorBoundaryContainer","LoaderComponent","DayComponent","props","index","selectedIndex","ThemeContext","theme","colorTheme","selectedDay","summary","TimeframeComponent","Timeframe","ForecastContainer","setSelectedDay","selectedDayIndex","setSelectedDayIndex","updateSelectedDay","today","selectedDayIndexHandler","indexOf","ErrorComponent","errorMessage","showCloseBtn","loaderText","map","key","daySelectHandler","WeatherForecastContainer","imageBorder","borderTopLeftRadius","borderTopRightRadius","style","background","timestamp","formatType"],"mappings":"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","file":"static/js/1.72d2b6cc.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport axiosRetry from 'axios-retry'\r\nimport {isUndefined, isEmpty, isNull} from 'lodash-es'\r\nimport FormatTime from './FormatTime'\r\n\r\nconst API_KEY = process.env.REACT_APP_DARKSKY_API_KEY\r\nconst CORS_URL = 'https://cors-anywhere.herokuapp.com'\r\n\r\n// Exponential back-off retry delay between requests\r\naxiosRetry(axios, {retryDelay: axiosRetry.exponentialDelay})\r\n\r\nconst getURL = latlong => {\r\n  // return `${CORS_URL}/https://api.darksky.net/forecast/${API_KEY}/${latlong}?extend=hourly&exclude=minutely,flags`\r\n  return `https://api.openweathermap.org/data/2.5/onecall?lat=49.1125&lon=9.7373&exclude=minutely,alerts&units=imperial&appid=15ae082efd5d59dfd372faa3e5c47758`\r\n}\r\n\r\n/**\r\n * @param {String} latlong (-43.53333,172.63333)\r\n */\r\nconst FetchWeatherData = async ({latlong}) => {\r\n  let weatherCurrent = {}\r\n  let weatherForecast = {}\r\n\r\n  // fetch weather data only when latlong is valid to avoid uneccessary API calls\r\n  if (!isUndefined(latlong) && !isEmpty(latlong) && !isNull(latlong)) {\r\n    try {\r\n      const {data} = await axios.get(getURL(latlong))\r\n      const weatherData = data\r\n      if (!isEmpty(weatherData) && !isUndefined(weatherData)) {\r\n        // NOTE: add timezone property to current, days, and timeFrame data to use it later for\r\n        // displaying weatherIcon with day or night variants specific to location timezone\r\n        // parsing sunriseTime & sunsetTime according to the timezone\r\n        const timezone = weatherData.timezone\r\n        weatherCurrent = {\r\n          timezone,\r\n          ...weatherData.current,\r\n          sunrise: weatherData.daily[0].sunrise,\r\n          sunset: weatherData.daily[0].sunset\r\n        }\r\n\r\n        // group 168 hours into days as keys in timeFrames\r\n        // group days and timeFrames into weatherForecast\r\n        const timeFrames = {}\r\n        // create date as the keys for timeFrame in timeFrames\r\n        // i.e timeFrames: {'02/28/2020': [{...timeFrame},...], ...}\r\n        weatherData.hourly.forEach(hour => {\r\n          const date = FormatTime(hour.dt, timezone, 'MM/DD/YYYY')\r\n          if (Object.keys(timeFrames).includes(date)) {\r\n            timeFrames[date].push({timezone, ...hour})\r\n          } else {\r\n            timeFrames[date] = [{timezone, ...hour}]\r\n          }\r\n        })\r\n        const days = {}\r\n        // create date as the keys for the day in days\r\n        // i.e days: {'02/28/2020': {...day}, ...}\r\n        weatherData.daily.forEach(day => {\r\n          const date = FormatTime(day.dt, timezone, 'MM/DD/YYYY')\r\n          // since there will be unique day objects in days\r\n          // just create a 'date' key with day object as value for as many days\r\n          days[date] = {timezone, ...day}\r\n        })\r\n\r\n        weatherForecast = {timeFrames, days}\r\n      }\r\n    } catch (err) {\r\n      console.error(err)\r\n    }\r\n  }\r\n// console.log({\r\n//   weatherCurrent,\r\n//   weatherForecast\r\n// })\r\n  return {\r\n    weatherCurrent,\r\n    weatherForecast\r\n  }\r\n}\r\n\r\nexport default FetchWeatherData\r\n","// modify carousel settings for timeframe and favorites component\r\n/**\r\n * time or favorite\r\n * @param {String} type\r\n * resolution can be mobile or tablet\r\n * @param {*} resolution\r\n */\r\nconst CarouselSettings = (type, resolution = 'mobile') => ({\r\n  width: '100%',\r\n  slidesToShow: type === 'time' ? (resolution === 'tablet' ? 8 : 3) : 1,\r\n  slidesToScroll: type === 'time' ? (resolution === 'tablet' ? 8 : 3) : 1,\r\n  initialSlideHeight: type === 'time' ? 100 : 200,\r\n  slideWidth: type === 'time' ? (resolution === 'tablet' ? 1.0 : 0.95) : 1.0,\r\n  speed: 1000,\r\n  easing: 'easeSinInOut',\r\n  defaultControlsConfig: {\r\n    prevButtonStyle: {\r\n      display: 'none',\r\n    },\r\n    nextButtonStyle: {\r\n      display: 'none',\r\n    },\r\n    pagingDotsStyle: {\r\n      fill: '#cfd9df',\r\n      display: 'flex',\r\n      position: 'relative',\r\n      top: type === 'day' ? '25px' : '35px',\r\n      margin: '10px 5px',\r\n    },\r\n  },\r\n})\r\n\r\nexport default CarouselSettings\r\n","import moment from 'moment-timezone'\r\n\r\n/**\r\n * format timestamp to time in the form of \"H:mm\" where H -> 0 - 23 & mm -> 00 - 59\r\n * @param {String} type (sunrise | sunset | hour)\r\n * @param {Number} time (sunriseTime, sunsetTime, 0 in case of hour)\r\n * @param {String} timezone (ex- Pacific/Auckland)\r\n */\r\nconst formatTime = (type, time, timezone) => {\r\n  if (type === 'sunrise' || type === 'sunset') {\r\n    return moment(time * 1000)\r\n      .tz(timezone)\r\n      .format('H:mm')\r\n  }\r\n  return moment().tz(timezone).format('H:mm')\r\n}\r\n\r\n/**\r\n * returns day or night based on the comparison of currentTime with sunrise and sunset times\r\n * @param {String} currentTime\r\n * @param {String} sunriseTime\r\n * @param {String} sunsetTime\r\n */\r\nconst getType = (currentTime, sunriseTime, sunsetTime) => {\r\n  const [currentHour, currentMinutes] = currentTime.split(':')\r\n  const [sunriseHour, sunriseMinutes] = sunriseTime.split(':')\r\n  const [sunsetHour, sunsetMinutes] = sunsetTime.split(':')\r\n  if (currentHour === sunriseHour || currentHour === sunsetHour) {\r\n    return Number(currentMinutes) >= Number(sunriseMinutes) ||\r\n      Number(currentMinutes) < Number(sunsetMinutes)\r\n      ? 'day'\r\n      : 'night'\r\n  } else {\r\n    return Number(currentHour) > Number(sunriseHour) &&\r\n      Number(currentHour) < Number(sunsetHour)\r\n      ? 'day'\r\n      : 'night'\r\n  }\r\n}\r\n\r\n/**\r\n * checks if it is dawn (sunrise) or dusk (sunset)\r\n * @param {*} currentTime\r\n * @param {*} time (sunriseTime for checking dawn & sunsetTime for checking dusk)\r\n */\r\nconst isDawnDusk = (currentTime, time) => {\r\n  const currentHour = currentTime.split(':')[0]\r\n  const timeHour = time.split(':')[0]\r\n  return (\r\n    Number(currentHour) === Number(timeHour) - 1 ||\r\n    Number(currentHour) === Number(timeHour)\r\n  )\r\n}\r\n\r\n/**\r\n * @param {Object} data (weatherCurrent)\r\n * @param {String} icon (ex- cloudy)\r\n * @param {String} timezone (ex- Pacific/Auckland)\r\n */\r\nconst getWeatherBackground = (data) => {\r\n  const {weather, timezone, sunrise, sunset} = data\r\n  const icon = weather[0].main;\r\n  // format sunrise and sunset in weatherCurrent of data into hour and minutes\r\n  const sunriseTime = formatTime('sunrise', sunrise, timezone)\r\n  const sunsetTime = formatTime('sunset', sunset, timezone)\r\n  const currentTime = formatTime('hour', 0, timezone)\r\n  // get the type like day or night\r\n  const type = getType(currentTime, sunriseTime, sunsetTime)\r\n  // check for dawn scenario before sunrise hour\r\n  const dawn = isDawnDusk(currentTime, sunriseTime)\r\n  // check for dusk scenario before sunset hour\r\n  const dusk = isDawnDusk(currentTime, sunsetTime)\r\n\r\n  if (icon) {\r\n    switch (icon) {\r\n      // case 'clear-day':\r\n      //   return dusk ? 'dusk' : dawn ? 'dawn' : 'clear-day'\r\n      // case 'clear-night':\r\n      //   return dusk ? 'dusk' : dawn ? 'dawn' : 'clear-night'\r\n      case 'Clear':\r\n        return `clear-${type}`\r\n      case 'Rain':\r\n        return `overcast-${type}`\r\n      case 'Snow':\r\n        return `overcast-${type}`\r\n      case 'Drizzle':\r\n        return `overcast-${type}`\r\n      case 'Dust':\r\n        return `cloudy-${type}`\r\n      case 'Fog':\r\n        return `overcast-${type}`\r\n        case 'Mist':\r\n        return `overcast-${type}`\r\n        case 'Smoke':\r\n          return `overcast-${type}`\r\n        case 'Haze':\r\n          return `overcast-${type}`\r\n          case 'Sand':\r\n          return `overcast-${type}`\r\n      case 'Clouds':\r\n        return `cloudy-${type}`\r\n      case 'Squall':\r\n        return `cloudy-${type}`\r\n      case 'Ash':\r\n        return `cloudy-${type}`\r\n      case 'Thunderstorm':\r\n        return 'thunderstorm'\r\n        case 'Tornado':\r\n          return 'tornado'\r\n      default:\r\n        return `clear-${type}`\r\n    }\r\n  }\r\n  return `clear-${type}`\r\n}\r\n\r\nexport default getWeatherBackground\r\n","import React, {useState, useEffect, useContext, useRef, Fragment} from 'react'\r\nimport {AddressContext} from '../../context/AddressContext'\r\nimport {isUndefined, isEmpty} from 'lodash-es'\r\nimport moment from 'moment-timezone'\r\nimport {PropTypes} from 'prop-types'\r\nimport {FaRegHeart, FaHeart} from 'react-icons/fa'\r\n\r\nconst InfoComponent = ({address, latlong, weatherCurrent}) => {\r\n  const {updateFavorites} = useContext(AddressContext)\r\n  const [date, setDate] = useState('')\r\n  const [time, setTime] = useState('')\r\n\r\n  // store formattedDateTime moment date object in the ref and update it for the first api call fetch\r\n  // this ref will be used to update date and time every second without making additional api calls\r\n  const formattedDateTimeRef = useRef()\r\n\r\n  const isBookmarked = () => {\r\n    if (localStorage.getItem('favorites')) {\r\n      const favorites = JSON.parse(localStorage.getItem('favorites'))\r\n      const matched = favorites.filter(\r\n        (favorite) => favorite.address.cityName === address.cityName\r\n      )\r\n      return matched.length > 0\r\n    }\r\n    return false\r\n  }\r\n\r\n  const favoritesHandler = () => {\r\n    // first ever favorite item stored in localStorage\r\n    if (!localStorage.getItem('favorites')) {\r\n      localStorage.setItem('favorites', JSON.stringify([{address, latlong}]))\r\n      updateFavorites({\r\n        favorites: [{address, latlong}],\r\n      })\r\n    } else {\r\n      const favorites = JSON.parse(localStorage.getItem('favorites'))\r\n      const duplicates = favorites.filter(\r\n        (favorite) => favorite.address.cityName === address.cityName\r\n      )\r\n      if (!duplicates.length) {\r\n        // add newly added favorite to old favorites\r\n        const updatedFavorites = [...favorites, {address, latlong}]\r\n        localStorage.setItem('favorites', JSON.stringify(updatedFavorites))\r\n        updateFavorites({\r\n          favorites: updatedFavorites,\r\n        })\r\n      } else {\r\n        // if already favorite is selected\r\n        // remove it from favorites\r\n        const removeIndex = favorites.findIndex(\r\n          (favorite) =>\r\n            favorite.address.cityName === duplicates[0].address.cityName\r\n        )\r\n        if (removeIndex !== -1) {\r\n          const newFavorites = [...favorites]\r\n          newFavorites.splice(removeIndex, 1)\r\n          localStorage.setItem('favorites', JSON.stringify(newFavorites))\r\n          updateFavorites({\r\n            favorites: newFavorites,\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // format and set date & time based on the dateObj\r\n  const datetimeSetter = (dateObj) => {\r\n    setDate(!isUndefined(dateObj) ? dateObj.format('MMMM Do, YYYY') : '')\r\n    setTime(!isUndefined(dateObj) ? dateObj.format('dddd HH:mm') : '')\r\n    formattedDateTimeRef.current = dateObj ? dateObj : null\r\n  }\r\n\r\n  useEffect(() => {\r\n    // reset date & time whenever weatherCurrent change\r\n    datetimeSetter(\r\n      moment(weatherCurrent.dt * 1000).tz(weatherCurrent.timezone)\r\n    )\r\n\r\n    const dateTimer = setInterval(() => {\r\n      if (weatherCurrent.dt) {\r\n        // update date and time every second only when there is a valid timestamp\r\n        const formattedDateTimeObj = moment\r\n          .tz(formattedDateTimeRef.current, weatherCurrent.timezone)\r\n          .add(1, 's')\r\n        datetimeSetter(formattedDateTimeObj)\r\n      }\r\n    }, 1000)\r\n    return () => {\r\n      clearInterval(dateTimer)\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [weatherCurrent])\r\n\r\n  return (\r\n    <div className='flex justify-between items-start'>\r\n      <div className='pt-4 px-4'>\r\n        <p className='font-bold'>{address.cityName}</p>\r\n        <div className='sm:flex-col md:flex md:flex-row font-light'>\r\n          {!isEmpty(date) && !isEmpty(time) ? (\r\n            <Fragment>\r\n              <p>\r\n                {date}\r\n                <span className='invisible md:visible'>&nbsp;|&nbsp;</span>\r\n              </p>\r\n              <p>{time}</p>\r\n            </Fragment>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n      {/* <div\r\n        className='mt-6 mr-6 cursor-pointer text-2xl'\r\n        title={\r\n          isBookmarked()\r\n            ? 'Remove this city from favorites'\r\n            : 'Favorite this city'\r\n        }\r\n        onClick={favoritesHandler}>\r\n        {isBookmarked() ? <FaHeart /> : <FaRegHeart />}\r\n      </div> */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default InfoComponent\r\n\r\nInfoComponent.propTypes = {\r\n  address: PropTypes.objectOf(PropTypes.string),\r\n  latlong: PropTypes.string,\r\n  weatherCurrent: PropTypes.object,\r\n}\r\n","/**\r\n * @param {Number} deg\r\n */\r\nconst getWindDirection = deg => {\r\n  if (deg >= 0 && deg <= 45) {\r\n    return 'up'\r\n  } else if (deg >= 46 && deg <= 90) {\r\n    return 'up-right'\r\n  } else if (deg >= 91 && deg <= 135) {\r\n    return 'right'\r\n  } else if (deg >= 136 && deg <= 180) {\r\n    return 'down-right'\r\n  } else if (deg >= 181 && deg <= 225) {\r\n    return 'down'\r\n  } else if (deg >= 226 && deg <= 270) {\r\n    return 'down-left'\r\n  } else if (deg >= 271 && deg <= 315) {\r\n    return 'left'\r\n  } else {\r\n    return 'up-left'\r\n  }\r\n}\r\n\r\nexport default getWindDirection\r\n","import moment from 'moment-timezone'\r\n\r\n/**\r\n * @param {Object} data (weatherCurrent, Timeframe, day)\r\n */\r\nconst getWeatherIcon = data => {\r\n  const { weather, dt:time, timezone } = data\r\n  const icon = weather[0].main;\r\n  const hour = moment(time * 1000)\r\n    .tz(timezone)\r\n    .format('H')\r\n  const type = hour >= 6 && hour <= 18 ? 'day' : 'night'\r\n  if (icon) {\r\n    switch (icon) {\r\n      case 'Clear':\r\n        return type\r\n      case 'Rain':\r\n        return `${type}-rain`\r\n      case 'Drizzle':\r\n        return `${type}-rain`\r\n      case 'Snow':\r\n        return `${type}-snow`\r\n      case 'Squall':\r\n        return 'sleet'\r\n      case 'Dust':\r\n        return `${type}-cloudy`\r\n      case 'Smoke':\r\n        return `${type}-cloudy`\r\n        case 'Sand':\r\n          return `${type}-cloudy`\r\n      case 'Fog':\r\n        return `${type}-cloudy`\r\n        case 'Ash':\r\n          return `${type}-cloudy`\r\n        case 'Mist':\r\n          return `${type}-cloudy`\r\n      case 'Clouds':\r\n        return `${type}-cloudy`\r\n      case 'Haze':\r\n        return `${type}-cloudy`\r\n      case 'Thunderstorm':\r\n        return 'thunder'\r\n      case 'Tornado':\r\n        return 'wi-tornado'\r\n      default:\r\n        return 'wi-na'\r\n    }\r\n  }\r\n  return 'wi-na'\r\n}\r\n\r\nexport default getWeatherIcon\r\n","const fToC = temp => {\r\n  return Math.round(((temp - 32) * 5) / 9)\r\n}\r\n\r\nconst cToF = temp => {\r\n  return Math.round((temp * 9) / 5 + 32)\r\n}\r\n\r\nexport {fToC, cToF}\r\n","import React from 'react'\r\nimport {\r\n  WiDirectionUp,\r\n  WiDirectionUpRight,\r\n  WiDirectionRight,\r\n  WiDirectionDownRight,\r\n  WiDirectionDown,\r\n  WiDirectionDownLeft,\r\n  WiDirectionLeft,\r\n  WiDirectionUpLeft,\r\n  WiDayFog,\r\n  WiNightFog,\r\n  WiDayCloudyWindy,\r\n  WiNightAltCloudyWindy,\r\n  WiTornado,\r\n  WiNa,\r\n  WiSunrise,\r\n  WiSunset\r\n} from 'react-icons/wi'\r\n\r\nconst WeatherIconComponent = ({type}) => {\r\n  const ICON_TYPES = {\r\n    'wi-day-fog': <WiDayFog />,\r\n    'wi-night-fog': <WiNightFog />,\r\n    'wi-day-windy': <WiDayCloudyWindy />,\r\n    'wi-night-windy': <WiNightAltCloudyWindy />,\r\n    'wi-tornado': <WiTornado />,\r\n    'wi-na': <WiNa />,\r\n    up: <WiDirectionUp />,\r\n    'up-right': <WiDirectionUpRight />,\r\n    right: <WiDirectionRight />,\r\n    'down-right': <WiDirectionDownRight />,\r\n    down: <WiDirectionDown />,\r\n    'down-left': <WiDirectionDownLeft />,\r\n    left: <WiDirectionLeft />,\r\n    'up-left': <WiDirectionUpLeft />,\r\n    sunrise: <WiSunrise />,\r\n    sunset: <WiSunset />\r\n  }\r\n\r\n  return ICON_TYPES[type] || <WiNa />\r\n}\r\n\r\nexport default WeatherIconComponent\r\n","import React, {Fragment, useContext} from 'react'\r\nimport {WeatherUnitContext} from '../../context/WeatherUnitContext'\r\nimport getWindDirection from '../../utils/WindDirection'\r\nimport getWeatherIcon from '../../utils/WeatherIcon'\r\nimport {mToK} from '../../utils/SpeedConvert'\r\nimport {fToC} from '../../utils/TemperatureConvert'\r\nimport {PropTypes} from 'prop-types'\r\nimport {FiPercent} from 'react-icons/fi'\r\nimport WeatherIconComponent from './WeatherIconComponent'\r\nimport AssetsSrcURL from '../../utils/AssetsSrcURL'\r\n\r\nconst InfoDetailComponent = ({weatherCurrent}) => {\r\n  const {weatherUnit, updateWeatherUnit} = useContext(WeatherUnitContext)\r\n  const unitClick = (unit) => {\r\n    // track event to GA\r\n   new Event({\r\n      category: 'Weather Unit',\r\n      action: 'Set Unit',\r\n      label: unit,\r\n    })\r\n    updateWeatherUnit(unit)\r\n  }\r\n\r\n  /**\r\n   * type can be `temperature` or `apparentTemperature`\r\n   * @param {String} type\r\n   */\r\n  const computedTempValue = (type) => {\r\n    return weatherUnit === 'F'\r\n      ? Math.round(weatherCurrent[`${type}`])\r\n      : fToC(weatherCurrent[`${type}`])\r\n  }\r\n\r\n  const computedSpeedValue = () => {\r\n    return weatherUnit === 'F'\r\n      ? `${Math.round(weatherCurrent.wind_speed)} mph`\r\n      : `${mToK(weatherCurrent.wind_speed)} kmph`\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className='sm:flex-col md:flex md:flex-row justify-between my-2 px-6 sm:mt-24 sm:mb-32 sm:px-6'>\r\n        <div className='flex-col sm:w-full lg:w-1/2'>\r\n          <div className='flex flex-row justify-between sm:justify-start sm:items-center'>\r\n            <div className='flex flex-col justify-center items-center'>\r\n              <div>\r\n                {getWeatherIcon(weatherCurrent).startsWith('wi') ? (\r\n                  <p\r\n                    className='text-6xl sm:mx-2 mt-2'\r\n                    title={weatherCurrent.weather[0].main}>\r\n                    {\r\n                      <WeatherIconComponent\r\n                        type={getWeatherIcon(weatherCurrent)}\r\n                      />\r\n                    }\r\n                  </p>\r\n                ) : (\r\n                  <img\r\n                    src={`${AssetsSrcURL}/weather/${getWeatherIcon(\r\n                      weatherCurrent\r\n                    )}.svg`}\r\n                    alt='icon'\r\n                    title={weatherCurrent.weather[0].main}\r\n                    className='-mt-2 -ml-4 sm:mx-0 w-32 h-32 object-contain'\r\n                  />\r\n                )}\r\n              </div>\r\n              <p className='hidden sm:flex sm:flex-no-wrap font-medium -mt-2 ml-3 capitalize'>\r\n                {weatherCurrent.weather[0].main}\r\n              </p>\r\n            </div>\r\n            <div className='flex justify-start items-center sm:-mt-3 sm:ml-3'>\r\n              <div>\r\n                <span className='text-6xl font-bold'>\r\n                  {computedTempValue('temp')}\r\n                </span>\r\n              </div>\r\n              <p className='-mt-8 text-3xl'>\r\n                <sup>o</sup>\r\n              </p>\r\n              <div className='-mt-10 mx-2 text-xl'>\r\n                <span\r\n                  className={`cursor-pointer ${\r\n                    weatherUnit === 'C'\r\n                      ? 'font-bold border-b border-light'\r\n                      : 'font-light opacity-75'\r\n                  }`}\r\n                  title='Celcius'\r\n                  onClick={() => unitClick('C')}>\r\n                  C\r\n                </span>\r\n                <span className={`mx-1 opacity-25`}>|</span>\r\n                <span\r\n                  className={`cursor-pointer ${\r\n                    weatherUnit === 'F'\r\n                      ? 'font-bold border-b border-light'\r\n                      : 'font-light opacity-75'\r\n                  }`}\r\n                  title='Fahrenheit'\r\n                  onClick={() => unitClick('F')}>\r\n                  F\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* weather info */}\r\n        <div className='flex flex-col justify-center items-center sm:mt-6 sm:w-full lg:w-1/2'>\r\n          <p className='sm:hidden font-medium capitalize text-2xl -mt-2 mb-2'>\r\n            {weatherCurrent.weather[0].main}\r\n          </p>\r\n          <div className='text-sm sm:text-lg ml-8'>\r\n            <div className='flex flex-row sm:my-2'>\r\n              <p className='font-light'>Humidity:</p>&nbsp;\r\n              <p className='mx-1 font-bold'>\r\n                {Math.round(weatherCurrent.humidity)}\r\n              </p>\r\n              <p className='text-sm mt-1'>\r\n                <FiPercent />\r\n              </p>\r\n            </div>\r\n            <div className='flex items-center sm:my-2'>\r\n              <p>\r\n                <span className='font-light'>Wind:</span>&nbsp;\r\n                <span className='font-bold'>{computedSpeedValue()} </span>\r\n              </p>\r\n              <p className='text-3xl'>\r\n                {\r\n                  <WeatherIconComponent\r\n                    type={getWindDirection(weatherCurrent.windBearing)}\r\n                  />\r\n                }\r\n              </p>\r\n            </div>\r\n            <p>\r\n              <span className='font-light sm:my-2'>Feels like:</span>&nbsp;\r\n              <span className='font-bold'>\r\n                {computedTempValue('feels_like')}\r\n              </span>\r\n              <sup>o</sup>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default InfoDetailComponent\r\n\r\nInfoDetailComponent.propTypes = {\r\n  weatherCurrent: PropTypes.object,\r\n}\r\n","const mToK = speed => {\r\n  return Math.round(speed * 1.6)\r\n}\r\n\r\nconst kToM = speed => {\r\n  return Math.round(speed * 0.6)\r\n}\r\n\r\nexport {mToK, kToM}\r\n","import React, {Fragment} from 'react'\r\nimport InfoComponent from '../../components/weather/InfoComponent'\r\nimport InfoDetailComponent from '../../components/weather/InfoDetailComponent'\r\nimport LoaderComponent from './../../components/loader/LoaderComponent'\r\nimport ErrorBoundaryContainer from '../error-boundary/ErrorBoundaryContainer'\r\nimport {PropTypes} from 'prop-types'\r\n\r\nconst CurrentWeatherContainer = ({weatherCurrent, address, latlong}) => {\r\n  return (\r\n    <ErrorBoundaryContainer>\r\n      <Fragment>\r\n        {address && weatherCurrent ? (\r\n          <div>\r\n            <InfoComponent\r\n              address={address}\r\n              latlong={latlong}\r\n              weatherCurrent={weatherCurrent}\r\n            />\r\n            <InfoDetailComponent weatherCurrent={weatherCurrent} />\r\n          </div>\r\n        ) : (\r\n          <LoaderComponent />\r\n        )}\r\n      </Fragment>\r\n    </ErrorBoundaryContainer>\r\n  )\r\n}\r\n\r\nexport default CurrentWeatherContainer\r\n\r\nCurrentWeatherContainer.propTypes = {\r\n  address: PropTypes.objectOf(PropTypes.string),\r\n  latlong: PropTypes.string,\r\n  weatherCurrent: PropTypes.object,\r\n}\r\n","import React, {useContext} from 'react'\r\nimport {WeatherUnitContext} from '../../context/WeatherUnitContext'\r\nimport {fToC} from '../../utils/TemperatureConvert'\r\nimport getWeatherIcon from '../../utils/WeatherIcon'\r\nimport FormatTime from './../../utils/FormatTime'\r\nimport {PropTypes} from 'prop-types'\r\nimport WeatherIconComponent from './WeatherIconComponent'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport AssetsSrcURL from '../../utils/AssetsSrcURL'\r\n\r\nconst DayComponent = (props) => {\r\n  const {day, index, selectedIndex} = props\r\n  const {weatherUnit} = useContext(WeatherUnitContext)\r\n  const {theme, colorTheme} = useContext(ThemeContext)\r\n\r\n  /**\r\n   * type can be 'High' or 'Low'\r\n   * @param {String} type\r\n   */\r\n  const computedTempValue = (type) => {\r\n    return weatherUnit === 'F'\r\n      ? Math.round(day.temp[`${type}`])\r\n      : fToC(day.temp[`${type}`])\r\n  }\r\n\r\n  // emit event to forecastContainer\r\n  const selectedDay = () => {\r\n    props.selectedDay({day})\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={`md:hover:bg-${colorTheme} md:hover:text-${theme} items-center text-center sm:flex-1 sm:py-1 sm:pb-3 cursor-pointer  ${\r\n        index === selectedIndex ? `bg-${colorTheme} text-${theme}` : ''\r\n      }`}\r\n      onClick={selectedDay}>\r\n      <div className='flex flex-row flex-no-wrap sm:flex-col sm:flex-wrap justify-around items-center px-2'>\r\n        <p className='flex w-1/6 sm:w-full sm:justify-center text-base font-semibold'>\r\n          {FormatTime(day.dt, day.timezone, 'ddd')}\r\n        </p>\r\n        {/* icon */}\r\n        <div className='flex w-1/6 sm:w-full'>\r\n          {getWeatherIcon(day).startsWith('wi') ? (\r\n            <p\r\n              className='my-1 sm:mt-1 sm:mb-3 mx-auto text-3xl'\r\n              title={day.summary}>\r\n              <WeatherIconComponent type={getWeatherIcon(day)} />\r\n            </p>\r\n          ) : (\r\n            <img\r\n              src={`${AssetsSrcURL}/weather/${getWeatherIcon(day)}.svg`}\r\n              alt='icon'\r\n              title={day.summary}\r\n              className='sm:-mt-2 sm:-mb-1 mx-auto w-12 h-12 sm:w-16 sm:h-16 object-contain'\r\n            />\r\n          )}\r\n        </div>\r\n        {/* high & low */}\r\n        <div className='flex flex-row justify-center items-center font-light w-1/4 sm:w-full mt-1 sm:mt-0'>\r\n          <p className='mx-2 text-xs sm:text-sm'>\r\n            {computedTempValue('max')}\r\n            <sup>o</sup>\r\n          </p>\r\n          <p className='mx-2 text-xs'>\r\n            {computedTempValue('min')}\r\n            <sup>o</sup>\r\n          </p>\r\n        </div>\r\n        {/* sunrise & sunset */}\r\n        <div\r\n          className={`${\r\n            index === selectedIndex ? 'flex' : 'flex'\r\n          } flex-row justify-around sm:justify-center sm:flex sm:flex-col w-5/12 sm:w-full font-light mt-1`}>\r\n          <div className='flex flex-row justify-center items-center mx-2 sm:my-1 text-xs sm:text-sm'>\r\n            <p\r\n              className='text-xl lg:text-2xl text-sun mr-2 md:mr-3'\r\n              title='sunrise'>\r\n              <WeatherIconComponent type='sunrise' />\r\n            </p>\r\n            <p>{FormatTime(day.sunrise, day.timezone, 'h:mm')}</p>\r\n          </div>\r\n          <div className='flex flex-row justify-center items-center mx-2 sm:my-1 text-xs sm:text-sm'>\r\n            <p\r\n              className='text-xl lg:text-2xl text-sun mr-2 md:mr-1'\r\n              title='sunset'>\r\n              <WeatherIconComponent type='sunset' />\r\n            </p>\r\n            <p>{FormatTime(day.sunset, day.timezone, 'HH:mm')}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DayComponent\r\n\r\nDayComponent.propTypes = {\r\n  day: PropTypes.object,\r\n  selectedDay: PropTypes.func,\r\n  index: PropTypes.number,\r\n  selectedIndex: PropTypes.number,\r\n}\r\n","import React, {useContext} from 'react'\r\nimport {WeatherUnitContext} from '../../context/WeatherUnitContext'\r\nimport {fToC} from '../../utils/TemperatureConvert'\r\nimport getWeatherIcon from '../../utils/WeatherIcon'\r\nimport FormatTime from './../../utils/FormatTime'\r\nimport {PropTypes} from 'prop-types'\r\nimport WeatherIconComponent from './WeatherIconComponent'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport AssetsSrcURL from '../../utils/AssetsSrcURL'\r\n\r\nconst TimeframeComponent = ({Timeframe}) => {\r\n  const {weatherUnit} = useContext(WeatherUnitContext)\r\n  const {colorTheme} = useContext(ThemeContext)\r\n\r\n  /**\r\n   * type can be `temperature` or `apparentTemperature`\r\n   * @param {String} type\r\n   */\r\n  const computedTempValue = (type) => {\r\n    return weatherUnit === 'F'\r\n      ? Math.round(Timeframe[`${type}`])\r\n      : fToC(Timeframe[`${type}`])\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={`border-none flex flex-col justify-start items-center mx-3 mb-3 w-full font-light text-${colorTheme} md:text-light`}>\r\n      <div>\r\n        {getWeatherIcon(Timeframe).startsWith('wi') ? (\r\n          <p className='text-5xl mt-4' title={Timeframe.summary}>\r\n            <WeatherIconComponent type={getWeatherIcon(Timeframe)} />\r\n          </p>\r\n        ) : (\r\n          <img\r\n            src={`${AssetsSrcURL}/weather/${getWeatherIcon(Timeframe)}.svg`}\r\n            alt='icon'\r\n            title={Timeframe.summary}\r\n            className='w-16 h-16 object-contain'\r\n          />\r\n        )}\r\n      </div>\r\n      <p className='text-base pb-1'>\r\n        {computedTempValue('temp')}\r\n        <sup>o</sup>\r\n      </p>\r\n      <p className='text-xs pb-1'>\r\n        {computedTempValue('feels_like')}\r\n        <sup>o</sup>\r\n      </p>\r\n      <p className='text-sm font-medium'>\r\n        {FormatTime(Timeframe.dt, Timeframe.timezone, 'HH:mm')}\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TimeframeComponent\r\n\r\nTimeframeComponent.propTypes = {\r\n  Timeframe: PropTypes.object,\r\n}\r\n","import React, {useState, useEffect, Fragment} from 'react'\r\nimport {isEmpty, isUndefined} from 'lodash-es'\r\nimport Carousel from 'nuka-carousel'\r\nimport DayComponent from '../../components/weather/DayComponent'\r\nimport TimeframeComponent from '../../components/weather/TimeframeComponent'\r\nimport LoaderComponent from '../../components/loader/LoaderComponent'\r\nimport CarouselSettings from '../../utils/CarouselSettings'\r\nimport ErrorComponent from './../../components/error/ErrorComponent'\r\nimport ErrorBoundaryContainer from '../error-boundary/ErrorBoundaryContainer'\r\nimport FormatTime from './../../utils/FormatTime'\r\nimport {PropTypes} from 'prop-types'\r\n\r\nconst ForecastContainer = ({cityName, weatherCurrent, weatherForecast}) => {\r\n  const [selectedDay, setSelectedDay] = useState('')\r\n  const [selectedDayIndex, setSelectedDayIndex] = useState(0)\r\n  const {dt, timezone} = weatherCurrent\r\n\r\n  // set the selectedDay to the current day by fetching current city date from weatherCurrent timestamp\r\n  const updateSelectedDay = async () => {\r\n    // show forecast elements when formattedDateTime is not an empty string & an error message starting with Failed\r\n    if (!isUndefined(weatherCurrent.dt)) {\r\n      const today = FormatTime(dt, timezone, 'MM/DD/YYYY')\r\n      // check if today key exist in days\r\n      if (!isEmpty(weatherForecast) && !isUndefined(weatherForecast)) {\r\n        setSelectedDay(weatherForecast.days[today] ? today : '')\r\n        selectedDayIndexHandler(weatherForecast.days[today] ? today : '')\r\n      }\r\n    }\r\n  }\r\n\r\n  // find the index of selectedDay in days object\r\n  const selectedDayIndexHandler = selectedDay => {\r\n    const index = Object.keys(weatherForecast.days).indexOf(selectedDay)\r\n    setSelectedDayIndex(index !== -1 ? index : 0)\r\n  }\r\n\r\n  /**\r\n   * day is a date '02/28/2020'\r\n   * @param {String} day\r\n   */\r\n  const daySelectHandler = day => {\r\n    setSelectedDay(day)\r\n    selectedDayIndexHandler(day)\r\n  }\r\n\r\n  useEffect(() => {\r\n    updateSelectedDay()\r\n    // eslint-disable-next-line\r\n  }, [weatherForecast])\r\n\r\n  return (\r\n    <ErrorBoundaryContainer>\r\n      <Fragment>\r\n        {!isEmpty(weatherForecast.days) && !isEmpty(selectedDay) ? (\r\n          <Fragment>\r\n            {/* mobile */}\r\n            <div className='sm:hidden pb-3'>\r\n              {weatherForecast.timeFrames[selectedDay] ? (\r\n                <Carousel {...CarouselSettings('time')}>\r\n                  {weatherForecast.timeFrames[selectedDay].map(\r\n                    (Timeframe, index) => {\r\n                      return (\r\n                        <TimeframeComponent Timeframe={Timeframe} key={index} />\r\n                      )\r\n                    }\r\n                  )}\r\n                </Carousel>\r\n              ) : (\r\n                <ErrorComponent\r\n                  errorMessage={`No hourly forecast available for ${selectedDay}`}\r\n                />\r\n              )}\r\n            </div>\r\n\r\n            {/* tablet and above devices */}\r\n            <div className='hidden sm:flex sm:pb-3 sm:mb-4'>\r\n              {weatherForecast.timeFrames[selectedDay] ? (\r\n                <Carousel {...CarouselSettings('time', 'tablet')}>\r\n                  {weatherForecast.timeFrames[selectedDay].map(\r\n                    (Timeframe, index) => {\r\n                      return (\r\n                        <TimeframeComponent Timeframe={Timeframe} key={index} />\r\n                      )\r\n                    }\r\n                  )}\r\n                </Carousel>\r\n              ) : (\r\n                <ErrorComponent\r\n                  errorMessage={`No hourly forecast available for ${selectedDay}`}\r\n                />\r\n              )}\r\n            </div>\r\n\r\n            {/* day */}\r\n            <div\r\n              className={`flex flex-col mt-4 sm:mt-0 sm:flex-row w-full rounded`}>\r\n              {Object.keys(weatherForecast.days).map((day, index) => {\r\n                // day is key in weatherForecast.days -> '02/28/2020'\r\n                // index is the position of key -> 0\r\n                return (\r\n                  <DayComponent\r\n                    day={weatherForecast.days[day]}\r\n                    key={index}\r\n                    index={index}\r\n                    selectedIndex={selectedDayIndex}\r\n                    selectedDay={() => daySelectHandler(day)}\r\n                  />\r\n                )\r\n              })}\r\n            </div>\r\n          </Fragment>\r\n        ) : (\r\n          <div className='mb-3'>\r\n            {isEmpty(weatherForecast.days) ? (\r\n              <ErrorComponent\r\n                errorMessage={'No forecast data available for this city!'}\r\n                showCloseBtn={false}\r\n              />\r\n            ) : (\r\n              <LoaderComponent\r\n                loaderText={`Fetching 7 days weather forecast for ${cityName}`}\r\n              />\r\n            )}\r\n          </div>\r\n        )}\r\n      </Fragment>\r\n    </ErrorBoundaryContainer>\r\n  )\r\n}\r\n\r\nexport default ForecastContainer\r\n\r\nForecastContainer.propTypes = {\r\n  cityName: PropTypes.string,\r\n  weatherCurrent: PropTypes.object,\r\n  weatherForecast: PropTypes.object\r\n}\r\n","import React, {useContext, Fragment} from 'react'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport getWeatherBackground from './../../utils/WeatherBackground'\r\nimport CurrentWeatherContainer from './../current-weather/CurrentWeatherContainer'\r\nimport ForecastContainer from './../forecast/ForecastContainer'\r\nimport './WeatherForecastStyle.scss'\r\nimport AssetsSrcURL from '../../utils/AssetsSrcURL'\r\n\r\nconst WeatherForecastContainer = ({\r\n  weatherCurrent,\r\n  weatherForecast,\r\n  address,\r\n  latlong,\r\n}) => {\r\n \r\n  const {theme, colorTheme} = useContext(ThemeContext)\r\n\r\n  const WET_TYPES = ['Rain', 'Snow', 'sleet', 'hail']\r\n\r\n  // return rain or snow svg image for the above wet types\r\n  const weatherSVG = () => {\r\n    if (weatherCurrent.weather[0].main === 'Snow') {\r\n      return 'snow'\r\n    }\r\n    return 'rain'\r\n  }\r\n\r\n  const imageBorder = {\r\n    borderTopLeftRadius: '1rem',\r\n    borderTopRightRadius: '1rem',\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <div\r\n        className={'flex flex-col justify-center items-center'}>\r\n        <div\r\n          className={`sm:w-full lg:w-6/6 xl:max-w-100 bg-${theme} text-${colorTheme} border border-${colorTheme} md:border-none shadow-lg`}>\r\n          <div className='relative overflow-hidden'>\r\n            <img\r\n              src={`${AssetsSrcURL}/weather-backgrounds/${getWeatherBackground(\r\n                weatherCurrent\r\n              )}.jpg`}\r\n              alt='clear day'\r\n              className='w-full object-cover object-center weather-background'\r\n              style={imageBorder}\r\n            />\r\n            {/* show rain or snow svg only when weather icon exist in WET_TYPES*/}\r\n            <div>\r\n              {WET_TYPES.includes(weatherCurrent.weather[0].main) && (\r\n                <img\r\n                  src={`${AssetsSrcURL}/weather-backgrounds/${weatherSVG()}.svg`}\r\n                  alt='clear day'\r\n                  className='w-full object-cover object-center absolute top-0 right-0 bottom-0 left-0 weather-background'\r\n                  style={imageBorder}\r\n                />\r\n              )}\r\n            </div>\r\n\r\n            {/* current weather container should be on the image on mobile and small devices */}\r\n            <div\r\n              className='block md:hidden absolute top-0 bottom-0 left-0 right-0 my-auto mx-auto text-light'\r\n              style={{background: 'rgba(0,0,0,0.2)', ...imageBorder}}>\r\n              <CurrentWeatherContainer\r\n                weatherCurrent={weatherCurrent}\r\n                address={address}\r\n                latlong={latlong}\r\n              />\r\n            </div>\r\n\r\n            {/* current weather and forecast container should be on the image from medium devices */}\r\n            <div\r\n              className='hidden md:block absolute top-0 bottom-0 left-0 right-0 my-auto mx-auto text-light'\r\n              style={{background: 'rgba(0,0,0,0.2)', ...imageBorder}}>\r\n              <CurrentWeatherContainer\r\n                weatherCurrent={weatherCurrent}\r\n                address={address}\r\n                latlong={latlong}\r\n              />\r\n              <ForecastContainer\r\n                cityName={address.cityName}\r\n                weatherCurrent={weatherCurrent}\r\n                weatherForecast={weatherForecast}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className='block md:hidden'>\r\n            <ForecastContainer\r\n              cityName={address.cityName}\r\n              weatherCurrent={weatherCurrent}\r\n              weatherForecast={weatherForecast}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* <div className='relative'>\r\n        <p\r\n          className={`mx-auto text-center pt-2 pb-10 text-xs font-light text-${colorTheme} bg-${theme}`}>\r\n          Powered by&nbsp;\r\n          <a\r\n            href='https://darksky.net/poweredby/'\r\n            target='_blank'\r\n            rel='noreferrer noopener'\r\n            className={`link z-0 font-medium hover:text-${theme}`}>\r\n            Dark Sky\r\n          </a>\r\n        </p>\r\n      </div> */}\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default WeatherForecastContainer\r\n","import moment from 'moment-timezone'\r\n\r\n/**\r\n * @param {Number} timestamp\r\n * @param {String} timezone\r\n */\r\nconst FormatTime = (timestamp, timezone, formatType) => {\r\n  return moment.tz(timestamp * 1000, timezone).format(formatType)\r\n}\r\n\r\nexport default FormatTime\r\n"],"sourceRoot":""}