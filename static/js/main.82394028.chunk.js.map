{"version":3,"sources":["components/loader/LoaderComponent.js","utils/AssetsSrcURL.js","App.js","serviceWorker.js","index.js","context/ThemeContext.js"],"names":["LoaderComponent","loaderText","theme","useContext","ThemeContext","className","isProduction","HomeContainer","lazy","App","fallback","path","exact","component","Boolean","window","location","hostname","match","publicURL","process","app","basename","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","React","createContext","toggleTheme","ThemeContextProvider","children","useState","setTheme","colorTheme","saveThemePreference","localStorage","setItem","JSON","stringify","useEffect","getItem","parse","hour","moment","format","daynightChecker","Provider","value","selectedTheme"],"mappings":"qHAAA,mCA0BeA,IArBS,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,WACjBC,EAASC,qBAAWC,KAApBF,MACP,OACE,yBAAKG,UAAU,oDACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,mBACf,yBAAKA,UAAU,oBAEhBJ,GACC,yBACEI,UAAS,sDACG,UAAVH,EAAoB,OAAS,UAE9BD,EACD,0BAAMI,UAAU,sBAAhB,W,gCCjBKC,IAAe,K,mPCKxBC,EAAgBC,gBAAK,kBAAM,uDAgClBC,GA/BgBD,gBAAK,kBAClC,iCAGU,WAAO,IACVN,EAASC,qBAAWC,KAApBF,MAEP,OACE,yBAAKG,UAAS,cAASH,EAAT,uCAIZ,6BACE,kBAAC,WAAD,CACEQ,SAAU,kBAACV,EAAA,EAAD,CAAiBC,WAAW,wBACtC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOU,KAAK,IAAIC,OAAK,EAACC,UAAWN,U,MCZzBO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCeN,IAAMC,EAAS,OAAGC,wCAA0B,IAEtCC,EACJ,kBAAC,IAAD,CAAQC,SAAUH,GAChB,kBAACf,EAAA,EAAD,KACE,kBAAC,EAAD,QAKNmB,IAASC,OAAOH,EAAKI,SAASC,eAAe,SDwFvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,gJElIb5B,EAAe6B,IAAMC,cAAc,CACvChC,MAAO,QACPiC,YAAa,eAGTC,EAAuB,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,EACjBC,mBAAS,IADQ,mBACpCpC,EADoC,KAC7BqC,EAD6B,KAErCC,EAAuB,UAAVtC,EAAoB,OAAS,QAQ1CuC,EAAsB,SAAAvC,GAC1BwC,aAAaC,QAAQ,QAASC,KAAKC,UAAU3C,KAyB/C,OAXA4C,qBAAU,WAGHJ,aAAaK,QAAQ,SAGxBR,EAASK,KAAKI,MAAMN,aAAaK,QAAQ,WAjBrB,WACtB,IAAME,EAAOC,MAASC,OAAO,KACzBF,GAAQ,GAAKA,EAAO,IACtBV,EAAS,SACTE,EAAoB,WAEpBF,EAAS,QACTE,EAAoB,SAQpBW,KAKD,IAGD,kBAAChD,EAAaiD,SAAd,CAAuBC,MAAO,CAACpD,QAAOsC,aAAYL,YAjChC,WAClB,IAAMoB,EAA0B,UAAVrD,EAAoB,OAAS,QACnDqC,EAASgB,GACTd,EAAoBc,MA+BjBlB,M","file":"static/js/main.82394028.chunk.js","sourcesContent":["import React, {useContext} from 'react'\nimport './LoaderStyle.scss'\nimport {ThemeContext} from '../../context/ThemeContext'\nimport {PropTypes} from 'prop-types'\n\nconst LoaderComponent = ({loaderText}) => {\n  const {theme} = useContext(ThemeContext)\n  return (\n    <div className='flex flex-col w-full justify-center items-center'>\n      <div className='spinner'>\n        <div className='double-bounce1'></div>\n        <div className='double-bounce2'></div>\n      </div>\n      {loaderText && (\n        <div\n          className={`mx-auto text-center text-sm font-light text-${\n            theme === 'light' ? 'dark' : 'light'\n          }`}>\n          {loaderText}\n          <span className='text-2xl text-fade'>...</span>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default LoaderComponent\n\nLoaderComponent.propTypes = {\n  loaderText: PropTypes.string\n}\n","// this URL points to the root directory of the app based on dev or prod environment\nconst isProduction = process.env.NODE_ENV === 'production'\nexport default isProduction ? '.' : './weather-app-test'\n","import React, {useContext, Suspense, lazy} from 'react'\nimport {Switch, Route} from 'react-router-dom'\nimport {ThemeContext} from './context/ThemeContext'\nimport HeaderComponent from './components/header/HeaderComponent'\nimport FooterComponent from './components/footer/FooterComponent'\nimport LoaderComponent from './components/loader/LoaderComponent'\n\nconst HomeContainer = lazy(() => import('./containers/home/HomeContainer'))\nconst PrivacyPolicyComponent = lazy(() =>\n  import('./components/privacy-policy/PrivacyPolicyComponent')\n)\n\nconst App = () => {\n  const {theme} = useContext(ThemeContext)\n\n  return (\n    <div className={` bg-${theme} tracking-wider border-box wrapper`}>\n      {/* <div>\n        <HeaderComponent />\n      </div> */}\n      <div>\n        <Suspense\n          fallback={<LoaderComponent loaderText='Loading components' />}>\n          <Switch>\n            <Route path='/' exact component={HomeContainer}></Route>\n            {/* <Route\n              path='/privacy-policy'\n              exact\n              component={PrivacyPolicyComponent}></Route> */}\n          </Switch>\n        </Suspense>\n      </div>\n      {/* <div>\n        <FooterComponent />\n      </div> */}\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {BrowserRouter as Router} from 'react-router-dom'\nimport {ThemeContextProvider} from './context/ThemeContext'\nimport App from './App'\nimport './styles/main.css'\nimport * as serviceWorker from './serviceWorker'\n\n// // custom console message\n// console.clear()\n// console.log(\n//   `%c\n\n// lloHe   HelloH lloHelloHel  HelloH       loHell          oHello\n// lloHe   Hello  lloHelloHell HelloH       loHell         loHelloH\n// loH     ell   lloH    Hell   llo          Hel         lloH  loHe\n// loH     ell    loH           ll           He          llo    oHe\n// loH     ell    loHell        ll           He         ello    oHel\n// loHelloHell    loHello       ll           He         ello    oHel\n// loHel o ell    loHello       llo          Hel         llo    oHe\n// loH     ell    loH          ello    oH   oHel    ll   llo    oHe\n// loH     ell    loHe    ell   llo    oH    Hel    ll   lloH  loHe\n// lloHe   Hello  lloHell Hell HelloHelloH  loHelloHell    loHelloH\n// lloHe   Hello  lloHelloHell HelloHelloH  loHelloHell     oHello\n\n// %c Interested in the code behind this application? Well you're in luck - this application is open source! \n// Come say hi, tell me what you're debugging, or if interested in the codebase, \n// check out the repo on GitHub - https://github.com/iamsainikhil/weather-react   `,\n//   'font-size: 1vmin',\n//   'margin-bottom: 5px; line-height: 1.5'\n// )\n\n// important change after recent upgrade of react-scripts to ^3.4.0\nconst publicURL = process.env.PUBLIC_URL ?? '/'\n\nconst app = (\n  <Router basename={publicURL}>\n    <ThemeContextProvider>\n      <App />\n    </ThemeContextProvider>\n  </Router>\n)\n\nReactDOM.render(app, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import React, {useState, useEffect} from 'react'\nimport moment from 'moment-timezone'\n\nconst ThemeContext = React.createContext({\n  theme: 'light',\n  toggleTheme: () => {}\n})\n\nconst ThemeContextProvider = ({children}) => {\n  const [theme, setTheme] = useState('')\n  const colorTheme = theme === 'light' ? 'dark' : 'light'\n\n  const toggleTheme = () => {\n    const selectedTheme = theme === 'light' ? 'dark' : 'light'\n    setTheme(selectedTheme)\n    saveThemePreference(selectedTheme)\n  }\n\n  const saveThemePreference = theme => {\n    localStorage.setItem('theme', JSON.stringify(theme))\n  }\n\n  const daynightChecker = () => {\n    const hour = moment().format('H')\n    if (hour >= 6 && hour < 18) {\n      setTheme('light')\n      saveThemePreference('light')\n    } else {\n      setTheme('dark')\n      saveThemePreference('dark')\n    }\n  }\n\n  useEffect(() => {\n    // set theme based on the time on initial application load and\n    // when there is no theme preference in the localStorage\n    if (!localStorage.getItem('theme')) {\n      daynightChecker()\n    } else {\n      setTheme(JSON.parse(localStorage.getItem('theme')))\n    }\n    // eslint-disable-next-line\n  }, [])\n\n  return (\n    <ThemeContext.Provider value={{theme, colorTheme, toggleTheme}}>\n      {children}\n    </ThemeContext.Provider>\n  )\n}\n\nexport {ThemeContext, ThemeContextProvider}\n"],"sourceRoot":""}