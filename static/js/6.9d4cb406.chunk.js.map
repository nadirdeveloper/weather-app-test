{"version":3,"sources":["components/address/AddressComponent.js","components/search/SearchComponent.js","containers/autocomplete/AutoCompleteContainer.js","containers/home/HomeContainer.js","components/error/ErrorComponent.js","context/AddressContext.js","context/WeatherUnitContext.js","containers/error-boundary/ErrorBoundaryContainer.js","utils/AlgoliaHeaders.js","utils/ValidCityName.js"],"names":["AddressComponent","props","useContext","ThemeContext","theme","colorTheme","className","onClick","addressSelected","address","cityName","IconComponent","type","color","TYPES","search","up","down","SearchComponent","style","backgroundColor","letterSpacing","id","placeholder","onChange","citySearch","value","city","showCaret","caretClicked","showAddresses","axiosRetry","axios","retryDelay","exponentialDelay","AutoCompleteContainer","state","showLoader","addresses","errorMessage","debounceAddress","debounce","getAddresses","searchCity","event","setState","target","toggleAddresses","prevState","setCity","a","split","context","updateState","latlong","message","this","trim","request","url","method","data","query","aroundLatLng","headers","HEADERS","hits","isEmpty","isUndefined","handleError","results","map","hit","en","default","administrative","country","validName","lat","lng","cityId","objectID","response","clearState","LoaderComponent","index","key","length","ErrorComponent","showCloseBtn","closeError","Component","contextType","AddressContext","WeatherContainer","lazy","HomeContainer","WeatherUnitContext","ErrorBoundaryContainer","fallback","loaderText","role","xmlns","viewBox","d","React","createContext","AddressContextProvider","updateFavorites","favorites","formatCoords","latitude","longitude","updateAddress","get","console","error","getAddress","log","getFavorites","localStorage","getItem","JSON","parse","Provider","children","propTypes","PropTypes","objectOf","string","array","func","weatherUnit","WeatherUnitContextProvider","useState","setWeatherUnit","useEffect","setItem","stringify","updateWeatherUnit","unit","hasError","process","REACT_APP_ALGOLIA_PLACES_APP_ID","REACT_APP_ALGOLIA_PLACES_API_KEY","name","showDelimeter","isNull"],"mappings":"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","file":"static/js/6.9d4cb406.chunk.js","sourcesContent":["import React, {useContext} from 'react'\nimport {ThemeContext} from '../../context/ThemeContext'\nimport {PropTypes} from 'prop-types'\n\nconst AddressComponent = props => {\n  const {theme, colorTheme} = useContext(ThemeContext)\n  return (\n    <p\n      className={`px-5 py-1 cursor-pointer item text-${colorTheme} hover:text-${theme} hover:bg-${colorTheme}`}\n      onClick={props.addressSelected}>\n      {props.address.cityName}\n    </p>\n  )\n}\n\nexport default AddressComponent\n\nAddressComponent.propTypes = {\n  addressSelected: PropTypes.func,\n  address: PropTypes.objectOf(PropTypes.string)\n}\n","import React, {useContext} from 'react'\nimport {ThemeContext} from '../../context/ThemeContext'\nimport {PropTypes} from 'prop-types'\nimport {FiSearch} from 'react-icons/fi'\nimport {IoIosArrowUp, IoIosArrowDown} from 'react-icons/io'\n\nconst IconComponent = ({type, color}) => {\n  const TYPES = {\n    search: <FiSearch />,\n    up: <IoIosArrowUp />,\n    down: <IoIosArrowDown />\n  }\n  return <p className={`opacity-75 text-2xl fill-${color}`}>{TYPES[type]}</p>\n}\n\nconst SearchComponent = props => {\n  const {theme, colorTheme} = useContext(ThemeContext)\n  return (\n    <div className='h-12 mx-5 mt-5'>\n      <div className='relative'>\n        <div className='absolute top-0 left-0 ml-5 mt-3'>\n          <IconComponent type='search' color={colorTheme} />\n        </div>\n        <input\n          style={{\n            backgroundColor: `${theme === 'dark' ? '#3a3a3a' : '#e2e8f0'}`,\n            letterSpacing: '0.05em'\n          }}\n          className={`data-hj-whitelist block appearance-none w-full border-none rounded-full shadow py-3 pl-12 pr-6 mb-3 leading-tight focus:outline-none focus:bg-gray-200 truncate text-${colorTheme}`}\n          id='grid-first-name'\n          type='text'\n          placeholder='Type city name to find weather forecast'\n          onChange={props.citySearch}\n          value={props.city}\n        />\n        {props.showCaret ? (\n          <div\n            className='flex right-0 absolute top-0 mr-4 mt-3 cursor-pointer'\n            onClick={props.caretClicked}>\n            {props.showAddresses ? (\n              <IconComponent type='up' color={colorTheme} />\n            ) : (\n              <IconComponent type='down' color={colorTheme} />\n            )}\n          </div>\n        ) : null}\n      </div>\n    </div>\n  )\n}\n\nexport default SearchComponent\n\nSearchComponent.propTypes = {\n  city: PropTypes.string,\n  cityName: PropTypes.string,\n  showCaret: PropTypes.bool,\n  showAddresses: PropTypes.bool,\n  caretClicked: PropTypes.func\n}\n","import React, {Component, Fragment} from 'react'\nimport axios from 'axios'\nimport axiosRetry from 'axios-retry'\nimport debounce from 'lodash/debounce'\nimport './AutoCompleteStyle.scss'\nimport AddressComponent from '../../components/address/AddressComponent'\nimport LoaderComponent from '../../components/loader/LoaderComponent'\nimport ErrorComponent from '../../components/error/ErrorComponent'\nimport {AddressContext} from '../../context/AddressContext'\nimport SearchComponent from '../../components/search/SearchComponent'\nimport {isEmpty, isUndefined} from 'lodash-es'\nimport HEADERS from '../../utils/AlgoliaHeaders'\nimport validName from '../../utils/ValidCityName'\n\n// Exponential back-off retry delay between requests\naxiosRetry(axios, {retryDelay: axiosRetry.exponentialDelay})\n\nclass AutoCompleteContainer extends Component {\n  static contextType = AddressContext\n  state = {\n    showCaret: false,\n    showAddresses: false,\n    showLoader: false,\n    city: '',\n    addresses: [],\n    errorMessage: '',\n  }\n\n  handleError(message) {\n    this.setState({errorMessage: message})\n  }\n\n  // debounced function\n  debounceAddress = debounce(this.getAddresses, 1000)\n\n  searchCity = (event) => {\n    this.setState({city: event.target.value, errorMessage: ''})\n    this.debounceAddress()\n  }\n\n  // fetch valid matched addresses for searched city\n  async getAddresses() {\n    // check for empty city value since deleting city value character by character will trigger the debounceAddress\n    // city value could be empty when this function run\n    // so this extra check will fix the bug of showing addresses list when there is no city name\n    if (this.state.city.trim()) {\n      try {\n        this.setState({showLoader: true})\n        const {hits} = (\n          await axios.request({\n            url: 'https://places-dsn.algolia.net/1/places/query',\n            method: 'post',\n            data: {\n              query: this.state.city,\n              type: 'city',\n              aroundLatLng: this.context.latlong,\n            },\n            headers: HEADERS,\n          })\n        ).data\n\n        // populate addresses and show them if matching cities exist\n        if (!isEmpty(hits) && !isUndefined(hits)) {\n          const results = hits.map((hit) => {\n            // city value lives in default array of locale_names\n            const city = `${\n              hit['locale_names'].en\n                ? hit['locale_names'].en[0]\n                : hit['locale_names'].default[0]\n            }`\n            // state value lives in administrative array\n            const state = `${hit.administrative ? hit.administrative[0] : ''}`\n            // country value lives in country object in different languages and gran the \"en\" version if available or else the default version\n            const country = `${\n              hit.country.en ? hit.country.en : hit.country.default\n            }`\n\n            // prettier-ignore\n            const cityName = `${validName(city)}${validName(state)}${validName(country, false)}`\n            const {lat, lng} = hit['_geoloc']\n            return {\n              cityName: cityName,\n              cityId: hit.objectID,\n              latlong: `${lat},${lng}`,\n            }\n          })\n          // results is an array of `address` objects with cityName, objectID, and latlong properties\n          this.setState({\n            addresses: results,\n            showCaret: true,\n            showAddresses: true,\n            errorMessage: '',\n          })\n        } else {\n          this.setState({showAddresses: false})\n          this.handleError(\n            'No matching cities found. Try searching with a valid city name!'\n          )\n        }\n      } catch (error) {\n        this.handleError(error.response ? error.response : '')\n      } finally {\n        this.setState({showLoader: false})\n      }\n    } else {\n      this.clearState()\n    }\n  }\n\n  toggleAddresses = () => {\n    this.setState((prevState) => {\n      return {\n        showAddresses: !prevState.showAddresses,\n      }\n    })\n  }\n\n  setCity = async (address) => {\n    if (address) {\n      // set city to just have cityName excluding state and country in the search input\n      // 'Herndon, Virginia, United States' -> 'Herndon'\n      this.setState({\n        city: address.cityName.split(',')[0],\n        showAddresses: false,\n      })\n\n      this.context.updateState({\n        address: address,\n        latlong: address.latlong,\n      })\n    }\n  }\n\n  clearState() {\n    this.setState({\n      showCaret: false,\n      showAddresses: false,\n      showLoader: false,\n      addresses: [],\n      errorMessage: '',\n    })\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <div className='flex justify-center mt-5'>\n          <div className='w-full sm:w-5/6 md:w-2/3 xl:max-w-5xl'>\n            <SearchComponent\n              city={this.state.city}\n              showCaret={this.state.showCaret}\n              showAddresses={this.state.showAddresses}\n              citySearch={this.searchCity}\n              caretClicked={this.toggleAddresses}\n            />\n          </div>\n        </div>\n        <div className='flex justify-center'>\n          <div className='w-full sm:w-5/6 md:w-2/3 xl:max-w-5xl'>\n            {this.state.showLoader ? (\n              <LoaderComponent />\n            ) : (\n              this.state.showAddresses && (\n                <div className='mx-10 mt-0 border-solid border-2 border-gray-400 rounded-b-xl address-list'>\n                  {this.state.addresses.map((address, index) => {\n                    return (\n                      <AddressComponent\n                        address={address}\n                        key={index}\n                        addressSelected={() => this.setCity(address)}\n                      />\n                    )\n                  })}\n                </div>\n              )\n            )}\n            {this.state.errorMessage.length > 0 && (\n              <div className='flex justify-center'>\n                <div className='w-5/6'>\n                  <ErrorComponent\n                    errorMessage={this.state.errorMessage}\n                    showCloseBtn={true}\n                    closeError={() => {\n                      this.setState({errorMessage: ''})\n                    }}\n                  />\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </Fragment>\n    )\n  }\n}\n\nexport default AutoCompleteContainer\n","import React, {Component, Suspense, lazy, Fragment} from 'react'\nimport AutoCompleteContainer from '../autocomplete/AutoCompleteContainer'\nimport LoaderComponent from '../../components/loader/LoaderComponent'\nimport {AddressContextProvider} from '../../context/AddressContext'\nimport {WeatherUnitContextProvider} from '../../context/WeatherUnitContext'\nimport {ThemeContext} from '../../context/ThemeContext'\nimport ErrorBoundaryContainer from '../error-boundary/ErrorBoundaryContainer'\nconst WeatherContainer = lazy(() => import('./../weather/WeatherContainer'))\nconst FavoritesContainer = lazy(() => import('../favorites/FavoritesContainer'))\n\nexport class HomeContainer extends Component {\n  static contextType = ThemeContext\n\n  render() {\n    return (\n      <Fragment>\n        <WeatherUnitContextProvider>\n          <AddressContextProvider>\n            {/* <AutoCompleteContainer /> */}\n            <ErrorBoundaryContainer>\n              <Suspense\n                fallback={\n                  <LoaderComponent loaderText={'Loading components'} />\n                }>\n                <WeatherContainer />\n                {/* <FavoritesContainer /> */}\n              </Suspense>\n            </ErrorBoundaryContainer>\n          </AddressContextProvider>\n        </WeatherUnitContextProvider>\n      </Fragment>\n    )\n  }\n}\n\nexport default HomeContainer\n","import React, {useContext} from 'react'\nimport {ThemeContext} from '../../context/ThemeContext'\n\nconst ErrorComponent = props => {\n  const {theme} = useContext(ThemeContext)\n  return (\n    <div\n      className={`w-full ml-auto mr-auto h-auto bg-${theme} border border-red-400 text-red-700 mt-5 px-4 py-2 rounded relative`}\n      role='alert'>\n      <span className='w-5/6 block break-words'>{props.errorMessage}</span>\n      {props.showCloseBtn && (\n        <span\n          className='absolute top-0 bottom-0 right-0 ml-3 mr-1 py-3'\n          onClick={props.closeError}>\n          <svg\n            className='fill-current h-6 w-6 text-red-500'\n            role='button'\n            xmlns='http://www.w3.org/2000/svg'\n            viewBox='0 0 20 20'>\n            <title>Close</title>\n            <path d='M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z' />\n          </svg>\n        </span>\n      )}\n    </div>\n  )\n}\n\nexport default ErrorComponent\n","import React, {Component} from 'react'\nimport {PropTypes} from 'prop-types'\nimport axios from 'axios'\nimport {isEmpty, isUndefined} from 'lodash-es'\nimport HEADERS from '../utils/AlgoliaHeaders'\nimport validName from './../utils/ValidCityName'\n\n// const token = process.env.REACT_APP_IPINFO_TOKEN\nconst AddressContext = React.createContext(null)\n\nclass AddressContextProvider extends Component {\n  updateState = (state) => {\n    this.setState({...state})\n  }\n\n  updateFavorites = (state) => {\n    this.setState({...state})\n  }\n  state = {\n    address: {\n      cityName: '',\n      cityId: '',\n    },\n    latlong: '',\n    favorites: [],\n    updateState: this.updateState,\n    updateFavorites: this.updateFavorites,\n  }\n\n  formatCoords = (latitude, longitude) => {\n    return `${latitude},${longitude}`\n  }\n\n  updateAddress = async (latlong) => {\n    let hit = {}\n    try {\n      const {hits} = (\n        await axios.get(\n          `https://places-dsn.algolia.net/1/places/reverse?aroundLatLng=${latlong},&hitsPerPage=1&language=en`,\n          {\n            headers: HEADERS,\n          }\n        )\n      ).data\n      hit = hits[0]\n\n      if (!isEmpty(hit) && !isUndefined(hit)) {\n        const city = hit.city ? hit.city[0] : ''\n        const state = hit.administrative ? hit.administrative[0] : ''\n        const country = hit.country ? hit.country : ''\n        const cityName = `${validName(city)}${validName(state)}${validName(\n          country,\n          false\n        )}`\n        const cityId = hit.objectID ? hit.objectID : ''\n        this.updateState({\n          address: {\n            cityName,\n            cityId,\n          },\n          latlong,\n        })\n      }\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  getAddress = async () => {\n    // if ('geolocation' in navigator) {\n    //   navigator.geolocation.getCurrentPosition(async (position) => {\n    //     const latlong = this.formatCoords(\n    //       \"24.8607\", \"67.0011\"\n    //     )\n    //     this.updateAddress(latlong)\n    //   })\n    // } else {\n      \n    // }\n\n    try {\n      const {data} = await axios.get('https://ipapi.co/json')\n      const latlong = this.formatCoords(\"49.1125\", \"9.7373\")\n      this.updateAddress(latlong)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  getFavorites = () => {\n    if (localStorage.getItem('favorites')) {\n      this.setState({\n        favorites: [...JSON.parse(localStorage.getItem('favorites'))],\n      })\n    }\n  }\n\n  componentDidMount() {\n    this.getAddress()\n    // update favorites for the initial application load\n    this.getFavorites()\n  }\n\n  render() {\n    return (\n      <AddressContext.Provider value={this.state}>\n        {this.props.children}\n      </AddressContext.Provider>\n    )\n  }\n}\n\nexport {AddressContext, AddressContextProvider}\n\nAddressContext.propTypes = {\n  address: PropTypes.objectOf(PropTypes.string),\n  favorites: PropTypes.array,\n  updateState: PropTypes.func,\n  updateFavorites: PropTypes.func,\n}\n","import React, {useState, useEffect} from 'react'\nconst WeatherUnitContext = React.createContext({\n  weatherUnit: 'C'\n})\n\nconst WeatherUnitContextProvider = ({children}) => {\n  const [weatherUnit, setWeatherUnit] = useState('C')\n\n  /**\n   * @param {String} unit (F | C)\n   * @param {String} type (selectUnit | toggle)\n   */\n  const updateWeatherUnit = unit => {\n    setWeatherUnit(unit)\n    localStorage.setItem('unit', JSON.stringify(unit))\n  }\n\n  useEffect(() => {\n    // store preferred temperature unit in localStorage\n    if (!localStorage.getItem('unit')) {\n      localStorage.setItem('unit', JSON.stringify('C'))\n    } else {\n      setWeatherUnit(JSON.parse(localStorage.getItem('unit')))\n    }\n    // eslint-disable-next-line\n  }, [])\n\n  return (\n    <WeatherUnitContext.Provider value={{weatherUnit, updateWeatherUnit}}>\n      {children}\n    </WeatherUnitContext.Provider>\n  )\n}\n\nexport {WeatherUnitContext, WeatherUnitContextProvider}\n","import React, {Component} from 'react'\nimport ErrorComponent from '../../components/error/ErrorComponent'\n\nexport class ErrorBoundaryContainer extends Component {\n  state = {\n    hasError: false,\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return {hasError: true}\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.hasError ? (\n          <div className='flex'>\n            <div className='w-1/6'></div>\n            <div className='w-2/3 justify-center text-center'>\n              <ErrorComponent\n                errorMessage={'Something went wrong. Reload the page!'}\n              />\n            </div>\n          </div>\n        ) : (\n          this.props.children\n        )}\n      </div>\n    )\n  }\n}\n\nexport default ErrorBoundaryContainer\n","// custom HTTP headers for authenticating requests sent to Algolia places server\n\nconst HEADERS = {\n  'X-Algolia-Application-Id': process.env.REACT_APP_ALGOLIA_PLACES_APP_ID || '',\n  'X-Algolia-API-Key': process.env.REACT_APP_ALGOLIA_PLACES_API_KEY || '',\n}\n\nexport default HEADERS\n","import {isEmpty, isUndefined, isNull} from 'lodash-es'\n\n/**\n * util func to check and return the valid name\n * @param {*} name (city or state or country)\n * @param {*} showDelimeter (false for country)\n */\nconst validName = (name, showDelimeter = true) => {\n  return !isEmpty(name) && !isUndefined(name) && !isNull(name)\n    ? `${name}${showDelimeter ? ', ' : ''}`\n    : ''\n}\n\nexport default validName\n"],"sourceRoot":""}