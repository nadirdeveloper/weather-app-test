{"version":3,"sources":["utils/FetchWeatherData.js","utils/CarouselSettings.js","utils/WeatherBackground.js","components/weather/InfoComponent.js","utils/WindDirection.js","utils/WeatherIcon.js","utils/TemperatureConvert.js","components/weather/WeatherIconComponent.js","components/weather/InfoDetailComponent.js","utils/SpeedConvert.js","containers/current-weather/CurrentWeatherContainer.js","components/weather/DayComponent.js","components/weather/TimeframeComponent.js","containers/forecast/ForecastContainer.js","containers/weather-forecast/WeatherForecastContainer.js","utils/FormatTime.js"],"names":["process","REACT_APP_DARKSKY_API_KEY","axiosRetry","axios","retryDelay","exponentialDelay","FetchWeatherData","a","latlong","weatherCurrent","weatherForecast","isUndefined","isEmpty","isNull","get","data","weatherData","timezone","current","sunrise","daily","sunset","timeFrames","hourly","forEach","hour","date","FormatTime","dt","Object","keys","includes","push","days","day","console","error","CarouselSettings","type","resolution","width","slidesToShow","slidesToScroll","initialSlideHeight","slideWidth","speed","easing","defaultControlsConfig","prevButtonStyle","display","nextButtonStyle","pagingDotsStyle","fill","position","top","margin","formatTime","time","moment","tz","format","isDawnDusk","currentTime","currentHour","split","timeHour","Number","getWeatherBackground","weather","icon","main","sunriseTime","sunsetTime","currentMinutes","sunriseHour","sunriseMinutes","sunsetHour","sunsetMinutes","getType","InfoComponent","address","useContext","AddressContext","updateFavorites","useState","setDate","setTime","formattedDateTimeRef","useRef","datetimeSetter","dateObj","useEffect","dateTimer","setInterval","formattedDateTimeObj","add","clearInterval","className","cityName","getWindDirection","deg","getWeatherIcon","fToC","temp","Math","round","WeatherIconComponent","up","right","down","left","InfoDetailComponent","WeatherUnitContext","weatherUnit","updateWeatherUnit","unitClick","unit","Event","category","action","label","computedTempValue","startsWith","title","src","AssetsSrcURL","alt","style","fontSize","onClick","humidity","wind_speed","computedSpeedValue","windBearing","CurrentWeatherContainer","ErrorBoundaryContainer","LoaderComponent","DayComponent","props","index","selectedIndex","ThemeContext","theme","colorTheme","selectedDay","summary","TimeframeComponent","Timeframe","ForecastContainer","setSelectedDay","selectedDayIndex","setSelectedDayIndex","updateSelectedDay","today","selectedDayIndexHandler","indexOf","ErrorComponent","errorMessage","showCloseBtn","loaderText","map","key","daySelectHandler","WeatherForecastContainer","imageBorder","borderTopLeftRadius","borderTopRightRadius","background","timestamp","formatType"],"mappings":"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","file":"static/js/1.7bc96d5f.chunk.js","sourcesContent":["import axios from 'axios'\nimport axiosRetry from 'axios-retry'\nimport {isUndefined, isEmpty, isNull} from 'lodash-es'\nimport FormatTime from './FormatTime'\n\nconst API_KEY = process.env.REACT_APP_DARKSKY_API_KEY\nconst CORS_URL = 'https://cors-anywhere.herokuapp.com'\n\n// Exponential back-off retry delay between requests\naxiosRetry(axios, {retryDelay: axiosRetry.exponentialDelay})\n\nconst getURL = latlong => {\n  // return `${CORS_URL}/https://api.darksky.net/forecast/${API_KEY}/${latlong}?extend=hourly&exclude=minutely,flags`\n  return `https://api.openweathermap.org/data/2.5/onecall?lat=49.1125&lon=9.7373&exclude=minutely,alerts&units=imperial&appid=15ae082efd5d59dfd372faa3e5c47758`\n}\n\n/**\n * @param {String} latlong (-43.53333,172.63333)\n */\nconst FetchWeatherData = async ({latlong}) => {\n  let weatherCurrent = {}\n  let weatherForecast = {}\n\n  // fetch weather data only when latlong is valid to avoid uneccessary API calls\n  if (!isUndefined(latlong) && !isEmpty(latlong) && !isNull(latlong)) {\n    try {\n      const {data} = await axios.get(getURL(latlong))\n      const weatherData = data\n      if (!isEmpty(weatherData) && !isUndefined(weatherData)) {\n        // NOTE: add timezone property to current, days, and timeFrame data to use it later for\n        // displaying weatherIcon with day or night variants specific to location timezone\n        // parsing sunriseTime & sunsetTime according to the timezone\n        const timezone = weatherData.timezone\n        weatherCurrent = {\n          timezone,\n          ...weatherData.current,\n          sunrise: weatherData.daily[0].sunrise,\n          sunset: weatherData.daily[0].sunset\n        }\n\n        // group 168 hours into days as keys in timeFrames\n        // group days and timeFrames into weatherForecast\n        const timeFrames = {}\n        // create date as the keys for timeFrame in timeFrames\n        // i.e timeFrames: {'02/28/2020': [{...timeFrame},...], ...}\n        weatherData.hourly.forEach(hour => {\n          const date = FormatTime(hour.dt, timezone, 'MM/DD/YYYY')\n          if (Object.keys(timeFrames).includes(date)) {\n            timeFrames[date].push({timezone, ...hour})\n          } else {\n            timeFrames[date] = [{timezone, ...hour}]\n          }\n        })\n        const days = {}\n        // create date as the keys for the day in days\n        // i.e days: {'02/28/2020': {...day}, ...}\n        weatherData.daily.forEach(day => {\n          const date = FormatTime(day.dt, timezone, 'MM/DD/YYYY')\n          // since there will be unique day objects in days\n          // just create a 'date' key with day object as value for as many days\n          days[date] = {timezone, ...day}\n        })\n\n        weatherForecast = {timeFrames, days}\n      }\n    } catch (err) {\n      console.error(err)\n    }\n  }\n// console.log({\n//   weatherCurrent,\n//   weatherForecast\n// })\n  return {\n    weatherCurrent,\n    weatherForecast\n  }\n}\n\nexport default FetchWeatherData\n","// modify carousel settings for timeframe and favorites component\n/**\n * time or favorite\n * @param {String} type\n * resolution can be mobile or tablet\n * @param {*} resolution\n */\nconst CarouselSettings = (type, resolution = 'mobile') => ({\n  width: '100%',\n  slidesToShow: type === 'time' ? (resolution === 'tablet' ? 8 : 3) : 1,\n  slidesToScroll: type === 'time' ? (resolution === 'tablet' ? 8 : 3) : 1,\n  initialSlideHeight: type === 'time' ? 100 : 200,\n  slideWidth: type === 'time' ? (resolution === 'tablet' ? 1.0 : 0.95) : 1.0,\n  speed: 1000,\n  easing: 'easeSinInOut',\n  defaultControlsConfig: {\n    prevButtonStyle: {\n      display: 'none',\n    },\n    nextButtonStyle: {\n      display: 'none',\n    },\n    pagingDotsStyle: {\n      fill: '#cfd9df',\n      display: 'flex',\n      position: 'relative',\n      top: type === 'day' ? '25px' : '35px',\n      margin: '10px 5px',\n    },\n  },\n})\n\nexport default CarouselSettings\n","import moment from 'moment-timezone'\n\n/**\n * format timestamp to time in the form of \"H:mm\" where H -> 0 - 23 & mm -> 00 - 59\n * @param {String} type (sunrise | sunset | hour)\n * @param {Number} time (sunriseTime, sunsetTime, 0 in case of hour)\n * @param {String} timezone (ex- Pacific/Auckland)\n */\nconst formatTime = (type, time, timezone) => {\n  if (type === 'sunrise' || type === 'sunset') {\n    return moment(time * 1000)\n      .tz(timezone)\n      .format('H:mm')\n  }\n  return moment().tz(timezone).format('H:mm')\n}\n\n/**\n * returns day or night based on the comparison of currentTime with sunrise and sunset times\n * @param {String} currentTime\n * @param {String} sunriseTime\n * @param {String} sunsetTime\n */\nconst getType = (currentTime, sunriseTime, sunsetTime) => {\n  const [currentHour, currentMinutes] = currentTime.split(':')\n  const [sunriseHour, sunriseMinutes] = sunriseTime.split(':')\n  const [sunsetHour, sunsetMinutes] = sunsetTime.split(':')\n  if (currentHour === sunriseHour || currentHour === sunsetHour) {\n    return Number(currentMinutes) >= Number(sunriseMinutes) ||\n      Number(currentMinutes) < Number(sunsetMinutes)\n      ? 'day'\n      : 'night'\n  } else {\n    return Number(currentHour) > Number(sunriseHour) &&\n      Number(currentHour) < Number(sunsetHour)\n      ? 'day'\n      : 'night'\n  }\n}\n\n/**\n * checks if it is dawn (sunrise) or dusk (sunset)\n * @param {*} currentTime\n * @param {*} time (sunriseTime for checking dawn & sunsetTime for checking dusk)\n */\nconst isDawnDusk = (currentTime, time) => {\n  const currentHour = currentTime.split(':')[0]\n  const timeHour = time.split(':')[0]\n  return (\n    Number(currentHour) === Number(timeHour) - 1 ||\n    Number(currentHour) === Number(timeHour)\n  )\n}\n\n/**\n * @param {Object} data (weatherCurrent)\n * @param {String} icon (ex- cloudy)\n * @param {String} timezone (ex- Pacific/Auckland)\n */\nconst getWeatherBackground = (data) => {\n  const {weather, timezone, sunrise, sunset} = data\n  const icon = weather[0].main;\n  // format sunrise and sunset in weatherCurrent of data into hour and minutes\n  const sunriseTime = formatTime('sunrise', sunrise, timezone)\n  const sunsetTime = formatTime('sunset', sunset, timezone)\n  const currentTime = formatTime('hour', 0, timezone)\n  // get the type like day or night\n  const type = getType(currentTime, sunriseTime, sunsetTime)\n  // check for dawn scenario before sunrise hour\n  const dawn = isDawnDusk(currentTime, sunriseTime)\n  // check for dusk scenario before sunset hour\n  const dusk = isDawnDusk(currentTime, sunsetTime)\n\n  if (icon) {\n    switch (icon) {\n      // case 'clear-day':\n      //   return dusk ? 'dusk' : dawn ? 'dawn' : 'clear-day'\n      // case 'clear-night':\n      //   return dusk ? 'dusk' : dawn ? 'dawn' : 'clear-night'\n      case 'Clear':\n        return `clear-${type}`\n      case 'Rain':\n        return `overcast-${type}`\n      case 'Snow':\n        return `overcast-${type}`\n      case 'Drizzle':\n        return `overcast-${type}`\n      case 'Dust':\n        return `cloudy-${type}`\n      case 'Fog':\n        return `overcast-${type}`\n        case 'Mist':\n        return `overcast-${type}`\n        case 'Smoke':\n          return `overcast-${type}`\n        case 'Haze':\n          return `overcast-${type}`\n          case 'Sand':\n          return `overcast-${type}`\n      case 'Clouds':\n        return `cloudy-${type}`\n      case 'Squall':\n        return `cloudy-${type}`\n      case 'Ash':\n        return `cloudy-${type}`\n      case 'Thunderstorm':\n        return 'thunderstorm'\n        case 'Tornado':\n          return 'tornado'\n      default:\n        return `clear-${type}`\n    }\n  }\n  return `clear-${type}`\n}\n\nexport default getWeatherBackground\n","import React, {useState, useEffect, useContext, useRef, Fragment} from 'react'\nimport {AddressContext} from '../../context/AddressContext'\nimport {isUndefined, isEmpty} from 'lodash-es'\nimport moment from 'moment-timezone'\nimport {PropTypes} from 'prop-types'\nimport {FaRegHeart, FaHeart} from 'react-icons/fa'\n\nconst InfoComponent = ({address, latlong, weatherCurrent}) => {\n  const {updateFavorites} = useContext(AddressContext)\n  const [date, setDate] = useState('')\n  const [time, setTime] = useState('')\n\n  // store formattedDateTime moment date object in the ref and update it for the first api call fetch\n  // this ref will be used to update date and time every second without making additional api calls\n  const formattedDateTimeRef = useRef()\n\n  const isBookmarked = () => {\n    if (localStorage.getItem('favorites')) {\n      const favorites = JSON.parse(localStorage.getItem('favorites'))\n      const matched = favorites.filter(\n        (favorite) => favorite.address.cityName === address.cityName\n      )\n      return matched.length > 0\n    }\n    return false\n  }\n\n  const favoritesHandler = () => {\n    // first ever favorite item stored in localStorage\n    if (!localStorage.getItem('favorites')) {\n      localStorage.setItem('favorites', JSON.stringify([{address, latlong}]))\n      updateFavorites({\n        favorites: [{address, latlong}],\n      })\n    } else {\n      const favorites = JSON.parse(localStorage.getItem('favorites'))\n      const duplicates = favorites.filter(\n        (favorite) => favorite.address.cityName === address.cityName\n      )\n      if (!duplicates.length) {\n        // add newly added favorite to old favorites\n        const updatedFavorites = [...favorites, {address, latlong}]\n        localStorage.setItem('favorites', JSON.stringify(updatedFavorites))\n        updateFavorites({\n          favorites: updatedFavorites,\n        })\n      } else {\n        // if already favorite is selected\n        // remove it from favorites\n        const removeIndex = favorites.findIndex(\n          (favorite) =>\n            favorite.address.cityName === duplicates[0].address.cityName\n        )\n        if (removeIndex !== -1) {\n          const newFavorites = [...favorites]\n          newFavorites.splice(removeIndex, 1)\n          localStorage.setItem('favorites', JSON.stringify(newFavorites))\n          updateFavorites({\n            favorites: newFavorites,\n          })\n        }\n      }\n    }\n  }\n\n  // format and set date & time based on the dateObj\n  const datetimeSetter = (dateObj) => {\n    setDate(!isUndefined(dateObj) ? dateObj.format('MMMM Do, YYYY') : '')\n    setTime(!isUndefined(dateObj) ? dateObj.format('dddd HH:mm') : '')\n    formattedDateTimeRef.current = dateObj ? dateObj : null\n  }\n\n  useEffect(() => {\n    // reset date & time whenever weatherCurrent change\n    datetimeSetter(\n      moment(weatherCurrent.dt * 1000).tz(weatherCurrent.timezone)\n    )\n\n    const dateTimer = setInterval(() => {\n      if (weatherCurrent.dt) {\n        // update date and time every second only when there is a valid timestamp\n        const formattedDateTimeObj = moment\n          .tz(formattedDateTimeRef.current, weatherCurrent.timezone)\n          .add(1, 's')\n        datetimeSetter(formattedDateTimeObj)\n      }\n    }, 1000)\n    return () => {\n      clearInterval(dateTimer)\n    }\n    // eslint-disable-next-line\n  }, [weatherCurrent])\n\n  return (\n    <div className='flex justify-between items-start'>\n      <div className='pt-4 px-4'>\n        <p className='font-bold text-3xl'>{address.cityName}</p>\n        <div className='sm:flex-col md:flex text-2xl md:flex-row font-light'>\n          {!isEmpty(date) && !isEmpty(time) ? (\n            <Fragment>\n              <p>\n                {date}\n                <span className='invisible md:visible'>&nbsp;|&nbsp;</span>\n              </p>\n              <p>{time}</p>\n            </Fragment>\n          ) : null}\n        </div>\n      </div>\n      {/* <div\n        className='mt-6 mr-6 cursor-pointer text-2xl'\n        title={\n          isBookmarked()\n            ? 'Remove this city from favorites'\n            : 'Favorite this city'\n        }\n        onClick={favoritesHandler}>\n        {isBookmarked() ? <FaHeart /> : <FaRegHeart />}\n      </div> */}\n    </div>\n  )\n}\n\nexport default InfoComponent\n\nInfoComponent.propTypes = {\n  address: PropTypes.objectOf(PropTypes.string),\n  latlong: PropTypes.string,\n  weatherCurrent: PropTypes.object,\n}\n","/**\n * @param {Number} deg\n */\nconst getWindDirection = deg => {\n  if (deg >= 0 && deg <= 45) {\n    return 'up'\n  } else if (deg >= 46 && deg <= 90) {\n    return 'up-right'\n  } else if (deg >= 91 && deg <= 135) {\n    return 'right'\n  } else if (deg >= 136 && deg <= 180) {\n    return 'down-right'\n  } else if (deg >= 181 && deg <= 225) {\n    return 'down'\n  } else if (deg >= 226 && deg <= 270) {\n    return 'down-left'\n  } else if (deg >= 271 && deg <= 315) {\n    return 'left'\n  } else {\n    return 'up-left'\n  }\n}\n\nexport default getWindDirection\n","import moment from 'moment-timezone'\n\n/**\n * @param {Object} data (weatherCurrent, Timeframe, day)\n */\nconst getWeatherIcon = data => {\n  const { weather, dt:time, timezone } = data\n  const icon = weather[0].main;\n  const hour = moment(time * 1000)\n    .tz(timezone)\n    .format('H')\n  const type = hour >= 6 && hour <= 18 ? 'day' : 'night'\n  if (icon) {\n    switch (icon) {\n      case 'Clear':\n        return type\n      case 'Rain':\n        return `${type}-rain`\n      case 'Drizzle':\n        return `${type}-rain`\n      case 'Snow':\n        return `${type}-snow`\n      case 'Squall':\n        return 'sleet'\n      case 'Dust':\n        return `${type}-cloudy`\n      case 'Smoke':\n        return `${type}-cloudy`\n        case 'Sand':\n          return `${type}-cloudy`\n      case 'Fog':\n        return `${type}-cloudy`\n        case 'Ash':\n          return `${type}-cloudy`\n        case 'Mist':\n          return `${type}-cloudy`\n      case 'Clouds':\n        return `${type}-cloudy`\n      case 'Haze':\n        return `${type}-cloudy`\n      case 'Thunderstorm':\n        return 'thunder'\n      case 'Tornado':\n        return 'wi-tornado'\n      default:\n        return 'wi-na'\n    }\n  }\n  return 'wi-na'\n}\n\nexport default getWeatherIcon\n","const fToC = temp => {\n  return Math.round(((temp - 32) * 5) / 9)\n}\n\nconst cToF = temp => {\n  return Math.round((temp * 9) / 5 + 32)\n}\n\nexport {fToC, cToF}\n","import React from 'react'\nimport {\n  WiDirectionUp,\n  WiDirectionUpRight,\n  WiDirectionRight,\n  WiDirectionDownRight,\n  WiDirectionDown,\n  WiDirectionDownLeft,\n  WiDirectionLeft,\n  WiDirectionUpLeft,\n  WiDayFog,\n  WiNightFog,\n  WiDayCloudyWindy,\n  WiNightAltCloudyWindy,\n  WiTornado,\n  WiNa,\n  WiSunrise,\n  WiSunset\n} from 'react-icons/wi'\n\nconst WeatherIconComponent = ({type}) => {\n  const ICON_TYPES = {\n    'wi-day-fog': <WiDayFog />,\n    'wi-night-fog': <WiNightFog />,\n    'wi-day-windy': <WiDayCloudyWindy />,\n    'wi-night-windy': <WiNightAltCloudyWindy />,\n    'wi-tornado': <WiTornado />,\n    'wi-na': <WiNa />,\n    up: <WiDirectionUp />,\n    'up-right': <WiDirectionUpRight />,\n    right: <WiDirectionRight />,\n    'down-right': <WiDirectionDownRight />,\n    down: <WiDirectionDown />,\n    'down-left': <WiDirectionDownLeft />,\n    left: <WiDirectionLeft />,\n    'up-left': <WiDirectionUpLeft />,\n    sunrise: <WiSunrise />,\n    sunset: <WiSunset />\n  }\n\n  return ICON_TYPES[type] || <WiNa />\n}\n\nexport default WeatherIconComponent\n","import React, {Fragment, useContext} from 'react'\nimport {WeatherUnitContext} from '../../context/WeatherUnitContext'\nimport getWindDirection from '../../utils/WindDirection'\nimport getWeatherIcon from '../../utils/WeatherIcon'\nimport {mToK} from '../../utils/SpeedConvert'\nimport {fToC} from '../../utils/TemperatureConvert'\nimport {PropTypes} from 'prop-types'\nimport {FiPercent} from 'react-icons/fi'\nimport WeatherIconComponent from './WeatherIconComponent'\nimport AssetsSrcURL from '../../utils/AssetsSrcURL'\n\nconst InfoDetailComponent = ({weatherCurrent}) => {\n  const {weatherUnit, updateWeatherUnit} = useContext(WeatherUnitContext)\n  const unitClick = (unit) => {\n    // track event to GA\n   new Event({\n      category: 'Weather Unit',\n      action: 'Set Unit',\n      label: unit,\n    })\n    updateWeatherUnit(unit)\n  }\n\n  /**\n   * type can be `temperature` or `apparentTemperature`\n   * @param {String} type\n   */\n  const computedTempValue = (type) => {\n    return weatherUnit === 'F'\n      ? Math.round(weatherCurrent[`${type}`])\n      : fToC(weatherCurrent[`${type}`])\n  }\n\n  const computedSpeedValue = () => {\n    return weatherUnit === 'F'\n      ? `${Math.round(weatherCurrent.wind_speed)} mph`\n      : `${mToK(weatherCurrent.wind_speed)} kmph`\n  }\n\n  return (\n    <Fragment>\n      <div className='sm:flex-col md:flex md:flex-row justify-between my-2 px-6 sm:mt-32 sm:mb-32 sm:px-6'>\n        <div className='flex-col sm:w-full lg:w-1/2'>\n          <div className='flex flex-row justify-between sm:justify-start sm:items-center'>\n            <div className='flex flex-col justify-center items-center'>\n              <div>\n                {getWeatherIcon(weatherCurrent).startsWith('wi') ? (\n                  <p\n                    className='text-6xl sm:mx-2 mt-2'\n                    title={weatherCurrent.weather[0].main}>\n                    {\n                      <WeatherIconComponent\n                        type={getWeatherIcon(weatherCurrent)}\n                      />\n                    }\n                  </p>\n                ) : (\n                  <img\n                    src={`${AssetsSrcURL}/weather/${getWeatherIcon(\n                      weatherCurrent\n                    )}.svg`}\n                    alt='icon'\n                    title={weatherCurrent.weather[0].main}\n                    className='-mt-2 -ml-4 sm:mx-0 w-32 h-32 object-contain'\n                  />\n                )}\n              </div>\n              <p className='hidden sm:flex sm:flex-no-wrap font-medium text-2xl -mt-2 ml-3 capitalize'>\n                {weatherCurrent.weather[0].main}\n              </p>\n            </div>\n            <div className='flex justify-start items-center sm:-mt-3 sm:ml-3'>\n              <div>\n                <span style={{fontSize:\"90px\"}} className='text-6xl font-bold'>\n                  {computedTempValue('temp')}\n                </span>\n              </div>\n              <p className='-mt-8 text-3xl'>\n                <sup>o</sup>\n              </p>\n              <div className='-mt-10 mx-2 text-xl'>\n                <span\n                  className={`cursor-pointer text-2xl ${\n                    weatherUnit === 'C'\n                      ? 'font-bold border-b border-light'\n                      : 'font-light opacity-75'\n                  }`}\n                  title='Celcius'\n                  onClick={() => unitClick('C')}>\n                  C\n                </span>\n                <span className={`mx-1 opacity-25`}>|</span>\n                <span\n                  className={`cursor-pointer text-2xl ${\n                    weatherUnit === 'F'\n                      ? 'font-bold border-b border-light'\n                      : 'font-light opacity-75'\n                  }`}\n                  title='Fahrenheit'\n                  onClick={() => unitClick('F')}>\n                  F\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n        {/* weather info */}\n        <div className='flex flex-col justify-center items-center sm:mt-6 sm:w-full lg:w-1/2'>\n          <p className='sm:hidden font-medium capitalize text-2xl -mt-2 mb-2'>\n            {weatherCurrent.weather[0].main}\n          </p>\n          <div className='text-sm sm:text-lg ml-8'>\n            <div className='flex flex-row sm:my-2'>\n              <p className='font-light'>Humidity:</p>&nbsp;\n              <p className='mx-1 font-bold'>\n                {Math.round(weatherCurrent.humidity)}\n              </p>\n              <p className='text-sm mt-1'>\n                <FiPercent />\n              </p>\n            </div>\n            <div className='flex items-center sm:my-2'>\n              <p>\n                <span className='font-light'>Wind:</span>&nbsp;\n                <span className='font-bold'>{computedSpeedValue()} </span>\n              </p>\n              <p className='text-3xl'>\n                {\n                  <WeatherIconComponent\n                    type={getWindDirection(weatherCurrent.windBearing)}\n                  />\n                }\n              </p>\n            </div>\n            <p>\n              <span className='font-light sm:my-2'>Feels like:</span>&nbsp;\n              <span className='font-bold'>\n                {computedTempValue('feels_like')}\n              </span>\n              <sup>o</sup>\n            </p>\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  )\n}\n\nexport default InfoDetailComponent\n\nInfoDetailComponent.propTypes = {\n  weatherCurrent: PropTypes.object,\n}\n","const mToK = speed => {\n  return Math.round(speed * 1.6)\n}\n\nconst kToM = speed => {\n  return Math.round(speed * 0.6)\n}\n\nexport {mToK, kToM}\n","import React, {Fragment} from 'react'\nimport InfoComponent from '../../components/weather/InfoComponent'\nimport InfoDetailComponent from '../../components/weather/InfoDetailComponent'\nimport LoaderComponent from './../../components/loader/LoaderComponent'\nimport ErrorBoundaryContainer from '../error-boundary/ErrorBoundaryContainer'\nimport {PropTypes} from 'prop-types'\n\nconst CurrentWeatherContainer = ({weatherCurrent, address, latlong}) => {\n  return (\n    <ErrorBoundaryContainer>\n      <Fragment>\n        {address && weatherCurrent ? (\n          <div>\n            <InfoComponent\n              address={address}\n              latlong={latlong}\n              weatherCurrent={weatherCurrent}\n            />\n            <InfoDetailComponent weatherCurrent={weatherCurrent} />\n          </div>\n        ) : (\n          <LoaderComponent />\n        )}\n      </Fragment>\n    </ErrorBoundaryContainer>\n  )\n}\n\nexport default CurrentWeatherContainer\n\nCurrentWeatherContainer.propTypes = {\n  address: PropTypes.objectOf(PropTypes.string),\n  latlong: PropTypes.string,\n  weatherCurrent: PropTypes.object,\n}\n","import React, {useContext} from 'react'\nimport {WeatherUnitContext} from '../../context/WeatherUnitContext'\nimport {fToC} from '../../utils/TemperatureConvert'\nimport getWeatherIcon from '../../utils/WeatherIcon'\nimport FormatTime from './../../utils/FormatTime'\nimport {PropTypes} from 'prop-types'\nimport WeatherIconComponent from './WeatherIconComponent'\nimport {ThemeContext} from '../../context/ThemeContext'\nimport AssetsSrcURL from '../../utils/AssetsSrcURL'\n\nconst DayComponent = (props) => {\n  const {day, index, selectedIndex} = props\n  const {weatherUnit} = useContext(WeatherUnitContext)\n  const {theme, colorTheme} = useContext(ThemeContext)\n\n  /**\n   * type can be 'High' or 'Low'\n   * @param {String} type\n   */\n  const computedTempValue = (type) => {\n    return weatherUnit === 'F'\n      ? Math.round(day.temp[`${type}`])\n      : fToC(day.temp[`${type}`])\n  }\n\n  // emit event to forecastContainer\n  const selectedDay = () => {\n    props.selectedDay({day})\n  }\n\n  return (\n    <div\n      className={`md:hover:bg-${colorTheme} md:hover:text-${theme} items-center text-center sm:flex-1 sm:py-1 sm:pb-3 cursor-pointer  ${\n        index === selectedIndex ? `bg-${colorTheme} text-${theme}` : ''\n      }`}\n      onClick={selectedDay}>\n      <div className='flex flex-row flex-no-wrap sm:flex-col sm:flex-wrap justify-around items-center px-2'>\n        <p className='flex w-1/6 sm:w-full sm:justify-center text-base font-semibold'>\n          {FormatTime(day.dt, day.timezone, 'ddd')}\n        </p>\n        {/* icon */}\n        <div className='flex w-1/6 sm:w-full'>\n          {getWeatherIcon(day).startsWith('wi') ? (\n            <p\n              className='my-1 sm:mt-1 sm:mb-3 mx-auto text-3xl'\n              title={day.summary}>\n              <WeatherIconComponent type={getWeatherIcon(day)} />\n            </p>\n          ) : (\n            <img\n              src={`${AssetsSrcURL}/weather/${getWeatherIcon(day)}.svg`}\n              alt='icon'\n              title={day.summary}\n              className='sm:-mt-2 sm:-mb-1 mx-auto w-12 h-12 sm:w-16 sm:h-16 object-contain'\n            />\n          )}\n        </div>\n        {/* high & low */}\n        <div className='flex flex-row justify-center items-center font-light w-1/4 sm:w-full mt-1 sm:mt-0'>\n          <p className='mx-2 text-xs sm:text-sm'>\n            {computedTempValue('max')}\n            <sup>o</sup>\n          </p>\n          <p className='mx-2 text-xs'>\n            {computedTempValue('min')}\n            <sup>o</sup>\n          </p>\n        </div>\n        {/* sunrise & sunset */}\n        <div\n          className={`${\n            index === selectedIndex ? 'flex' : 'flex'\n          } flex-row justify-around sm:justify-center sm:flex sm:flex-col w-5/12 sm:w-full font-light mt-1`}>\n          <div className='flex flex-row justify-center items-center mx-2 sm:my-1 text-xs sm:text-sm'>\n            <p\n              className='text-xl lg:text-2xl text-sun mr-2 md:mr-3'\n              title='sunrise'>\n              <WeatherIconComponent type='sunrise' />\n            </p>\n            <p>{FormatTime(day.sunrise, day.timezone, 'h:mm')}</p>\n          </div>\n          <div className='flex flex-row justify-center items-center mx-2 sm:my-1 text-xs sm:text-sm'>\n            <p\n              className='text-xl lg:text-2xl text-sun mr-2 md:mr-1'\n              title='sunset'>\n              <WeatherIconComponent type='sunset' />\n            </p>\n            <p>{FormatTime(day.sunset, day.timezone, 'HH:mm')}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default DayComponent\n\nDayComponent.propTypes = {\n  day: PropTypes.object,\n  selectedDay: PropTypes.func,\n  index: PropTypes.number,\n  selectedIndex: PropTypes.number,\n}\n","import React, {useContext} from 'react'\nimport {WeatherUnitContext} from '../../context/WeatherUnitContext'\nimport {fToC} from '../../utils/TemperatureConvert'\nimport getWeatherIcon from '../../utils/WeatherIcon'\nimport FormatTime from './../../utils/FormatTime'\nimport {PropTypes} from 'prop-types'\nimport WeatherIconComponent from './WeatherIconComponent'\nimport {ThemeContext} from '../../context/ThemeContext'\nimport AssetsSrcURL from '../../utils/AssetsSrcURL'\n\nconst TimeframeComponent = ({Timeframe}) => {\n  const {weatherUnit} = useContext(WeatherUnitContext)\n  const {colorTheme} = useContext(ThemeContext)\n\n  /**\n   * type can be `temperature` or `apparentTemperature`\n   * @param {String} type\n   */\n  const computedTempValue = (type) => {\n    return weatherUnit === 'F'\n      ? Math.round(Timeframe[`${type}`])\n      : fToC(Timeframe[`${type}`])\n  }\n\n  return (\n    <div\n      className={`border-none flex flex-col justify-start items-center mx-3 mb-3 w-full font-light text-${colorTheme} md:text-light`}>\n      <div>\n        {getWeatherIcon(Timeframe).startsWith('wi') ? (\n          <p className='text-5xl mt-4' title={Timeframe.summary}>\n            <WeatherIconComponent type={getWeatherIcon(Timeframe)} />\n          </p>\n        ) : (\n          <img\n            src={`${AssetsSrcURL}/weather/${getWeatherIcon(Timeframe)}.svg`}\n            alt='icon'\n            title={Timeframe.summary}\n            className='w-16 h-16 object-contain'\n          />\n        )}\n      </div>\n      <p className='text-base pb-1'>\n        {computedTempValue('temp')}\n        <sup>o</sup>\n      </p>\n      <p className='text-xs pb-1'>\n        {computedTempValue('feels_like')}\n        <sup>o</sup>\n      </p>\n      <p className='text-sm font-medium'>\n        {FormatTime(Timeframe.dt, Timeframe.timezone, 'HH:mm')}\n      </p>\n    </div>\n  )\n}\n\nexport default TimeframeComponent\n\nTimeframeComponent.propTypes = {\n  Timeframe: PropTypes.object,\n}\n","import React, {useState, useEffect, Fragment} from 'react'\nimport {isEmpty, isUndefined} from 'lodash-es'\nimport Carousel from 'nuka-carousel'\nimport DayComponent from '../../components/weather/DayComponent'\nimport TimeframeComponent from '../../components/weather/TimeframeComponent'\nimport LoaderComponent from '../../components/loader/LoaderComponent'\nimport CarouselSettings from '../../utils/CarouselSettings'\nimport ErrorComponent from './../../components/error/ErrorComponent'\nimport ErrorBoundaryContainer from '../error-boundary/ErrorBoundaryContainer'\nimport FormatTime from './../../utils/FormatTime'\nimport {PropTypes} from 'prop-types'\n\nconst ForecastContainer = ({cityName, weatherCurrent, weatherForecast}) => {\n  const [selectedDay, setSelectedDay] = useState('')\n  const [selectedDayIndex, setSelectedDayIndex] = useState(0)\n  const {dt, timezone} = weatherCurrent\n\n  // set the selectedDay to the current day by fetching current city date from weatherCurrent timestamp\n  const updateSelectedDay = async () => {\n    // show forecast elements when formattedDateTime is not an empty string & an error message starting with Failed\n    if (!isUndefined(weatherCurrent.dt)) {\n      const today = FormatTime(dt, timezone, 'MM/DD/YYYY')\n      // check if today key exist in days\n      if (!isEmpty(weatherForecast) && !isUndefined(weatherForecast)) {\n        setSelectedDay(weatherForecast.days[today] ? today : '')\n        selectedDayIndexHandler(weatherForecast.days[today] ? today : '')\n      }\n    }\n  }\n\n  // find the index of selectedDay in days object\n  const selectedDayIndexHandler = selectedDay => {\n    const index = Object.keys(weatherForecast.days).indexOf(selectedDay)\n    setSelectedDayIndex(index !== -1 ? index : 0)\n  }\n\n  /**\n   * day is a date '02/28/2020'\n   * @param {String} day\n   */\n  const daySelectHandler = day => {\n    setSelectedDay(day)\n    selectedDayIndexHandler(day)\n  }\n\n  useEffect(() => {\n    updateSelectedDay()\n    // eslint-disable-next-line\n  }, [weatherForecast])\n\n  return (\n    <ErrorBoundaryContainer>\n      <Fragment>\n        {!isEmpty(weatherForecast.days) && !isEmpty(selectedDay) ? (\n          <Fragment>\n            {/* mobile */}\n            <div className='sm:hidden pb-3'>\n              {weatherForecast.timeFrames[selectedDay] ? (\n                <Carousel {...CarouselSettings('time')}>\n                  {weatherForecast.timeFrames[selectedDay].map(\n                    (Timeframe, index) => {\n                      return (\n                        <TimeframeComponent Timeframe={Timeframe} key={index} />\n                      )\n                    }\n                  )}\n                </Carousel>\n              ) : (\n                <ErrorComponent\n                  errorMessage={`No hourly forecast available for ${selectedDay}`}\n                />\n              )}\n            </div>\n\n            {/* tablet and above devices */}\n            <div className='hidden sm:flex sm:pb-3 sm:mb-4'>\n              {weatherForecast.timeFrames[selectedDay] ? (\n                <Carousel {...CarouselSettings('time', 'tablet')}>\n                  {weatherForecast.timeFrames[selectedDay].map(\n                    (Timeframe, index) => {\n                      return (\n                        <TimeframeComponent Timeframe={Timeframe} key={index} />\n                      )\n                    }\n                  )}\n                </Carousel>\n              ) : (\n                <ErrorComponent\n                  errorMessage={`No hourly forecast available for ${selectedDay}`}\n                />\n              )}\n            </div>\n\n            {/* day */}\n            <div\n              className={`flex flex-col mt-4 sm:mt-0 sm:flex-row w-full rounded`}>\n              {Object.keys(weatherForecast.days).map((day, index) => {\n                // day is key in weatherForecast.days -> '02/28/2020'\n                // index is the position of key -> 0\n                return (\n                  <DayComponent\n                    day={weatherForecast.days[day]}\n                    key={index}\n                    index={index}\n                    selectedIndex={selectedDayIndex}\n                    selectedDay={() => daySelectHandler(day)}\n                  />\n                )\n              })}\n            </div>\n          </Fragment>\n        ) : (\n          <div className='mb-3'>\n            {isEmpty(weatherForecast.days) ? (\n              <ErrorComponent\n                errorMessage={'No forecast data available for this city!'}\n                showCloseBtn={false}\n              />\n            ) : (\n              <LoaderComponent\n                loaderText={`Fetching 7 days weather forecast for ${cityName}`}\n              />\n            )}\n          </div>\n        )}\n      </Fragment>\n    </ErrorBoundaryContainer>\n  )\n}\n\nexport default ForecastContainer\n\nForecastContainer.propTypes = {\n  cityName: PropTypes.string,\n  weatherCurrent: PropTypes.object,\n  weatherForecast: PropTypes.object\n}\n","import React, {useContext, Fragment} from 'react'\nimport {ThemeContext} from '../../context/ThemeContext'\nimport getWeatherBackground from './../../utils/WeatherBackground'\nimport CurrentWeatherContainer from './../current-weather/CurrentWeatherContainer'\nimport ForecastContainer from './../forecast/ForecastContainer'\nimport './WeatherForecastStyle.scss'\nimport AssetsSrcURL from '../../utils/AssetsSrcURL'\n\nconst WeatherForecastContainer = ({\n  weatherCurrent,\n  weatherForecast,\n  address,\n  latlong,\n}) => {\n \n  const {theme, colorTheme} = useContext(ThemeContext)\n\n  const WET_TYPES = ['Rain', 'Snow', 'sleet', 'hail']\n\n  // return rain or snow svg image for the above wet types\n  const weatherSVG = () => {\n    if (weatherCurrent.weather[0].main === 'Snow') {\n      return 'snow'\n    }\n    return 'rain'\n  }\n\n  const imageBorder = {\n    borderTopLeftRadius: '1rem',\n    borderTopRightRadius: '1rem',\n  }\n\n  return (\n    <Fragment>\n      <div\n        className={'flex flex-col justify-center items-center'}>\n        <div\n          className={`sm:w-full lg:w-6/6 xl:max-w-100 bg-${theme} text-${colorTheme} border border-${colorTheme} md:border-none shadow-lg`}>\n          <div className='relative overflow-hidden'>\n            <img\n              src={`${AssetsSrcURL}/weather-backgrounds/${getWeatherBackground(\n                weatherCurrent\n              )}.jpg`}\n              alt='clear day'\n              className='w-full object-cover object-center weather-background'\n              style={imageBorder}\n            />\n            {/* show rain or snow svg only when weather icon exist in WET_TYPES*/}\n            <div>\n              {WET_TYPES.includes(weatherCurrent.weather[0].main) && (\n                <img\n                  src={`${AssetsSrcURL}/weather-backgrounds/${weatherSVG()}.svg`}\n                  alt='clear day'\n                  className='w-full object-cover object-center absolute top-0 right-0 bottom-0 left-0 weather-background'\n                  style={imageBorder}\n                />\n              )}\n            </div>\n\n            {/* current weather container should be on the image on mobile and small devices */}\n            <div\n              className='block md:hidden absolute top-0 bottom-0 left-0 right-0 my-auto mx-auto text-light'\n              style={{background: 'rgba(0,0,0,0.2)', ...imageBorder}}>\n              <CurrentWeatherContainer\n                weatherCurrent={weatherCurrent}\n                address={address}\n                latlong={latlong}\n              />\n            </div>\n\n            {/* current weather and forecast container should be on the image from medium devices */}\n            <div\n              className='hidden md:block absolute top-0 bottom-0 left-0 right-0 my-auto mx-auto text-light'\n              style={{background: 'rgba(0,0,0,0.2)', ...imageBorder}}>\n              <CurrentWeatherContainer\n                weatherCurrent={weatherCurrent}\n                address={address}\n                latlong={latlong}\n              />\n              <ForecastContainer\n                cityName={address.cityName}\n                weatherCurrent={weatherCurrent}\n                weatherForecast={weatherForecast}\n              />\n            </div>\n          </div>\n\n          <div className='block md:hidden'>\n            <ForecastContainer\n              cityName={address.cityName}\n              weatherCurrent={weatherCurrent}\n              weatherForecast={weatherForecast}\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* <div className='relative'>\n        <p\n          className={`mx-auto text-center pt-2 pb-10 text-xs font-light text-${colorTheme} bg-${theme}`}>\n          Powered by&nbsp;\n          <a\n            href='https://darksky.net/poweredby/'\n            target='_blank'\n            rel='noreferrer noopener'\n            className={`link z-0 font-medium hover:text-${theme}`}>\n            Dark Sky\n          </a>\n        </p>\n      </div> */}\n    </Fragment>\n  )\n}\n\nexport default WeatherForecastContainer\n","import moment from 'moment-timezone'\n\n/**\n * @param {Number} timestamp\n * @param {String} timezone\n */\nconst FormatTime = (timestamp, timezone, formatType) => {\n  return moment.tz(timestamp * 1000, timezone).format(formatType)\n}\n\nexport default FormatTime\n"],"sourceRoot":""}